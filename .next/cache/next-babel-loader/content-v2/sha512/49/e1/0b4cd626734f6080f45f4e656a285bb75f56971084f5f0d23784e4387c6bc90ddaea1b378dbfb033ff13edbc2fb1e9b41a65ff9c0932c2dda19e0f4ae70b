{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport ReactTooltip from 'react-tooltip';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\nimport classNames from 'classnames';\nimport tinycolor from 'tinycolor2';\nimport useTheme from 'hooks/useTheme';\nimport { ISO_COUNTRIES, THEME_COLORS, MAP_FILE } from 'lib/constants';\nimport styles from './WorldMap.module.css';\nimport useCountryNames from 'hooks/useCountryNames';\nimport useLocale from 'hooks/useLocale';\n\nfunction WorldMap(_ref) {\n  var data = _ref.data,\n      className = _ref.className;\n\n  var _useRouter = useRouter(),\n      basePath = _useRouter.basePath;\n\n  var _useState = useState(),\n      tooltip = _useState[0],\n      setTooltip = _useState[1];\n\n  var _useTheme = useTheme(),\n      _useTheme2 = _slicedToArray(_useTheme, 1),\n      theme = _useTheme2[0];\n\n  var colors = useMemo(function () {\n    return {\n      baseColor: THEME_COLORS[theme].primary,\n      fillColor: THEME_COLORS[theme].gray100,\n      strokeColor: THEME_COLORS[theme].primary,\n      hoverColor: THEME_COLORS[theme].primary\n    };\n  }, [theme]);\n\n  var _useLocale = useLocale(),\n      _useLocale2 = _slicedToArray(_useLocale, 1),\n      locale = _useLocale2[0];\n\n  var countryNames = useCountryNames(locale);\n\n  function getFillColor(code) {\n    if (code === 'AQ') return;\n    var country = data === null || data === void 0 ? void 0 : data.find(function (_ref2) {\n      var x = _ref2.x;\n      return x === code;\n    });\n\n    if (!country) {\n      return colors.fillColor;\n    }\n\n    return tinycolor(colors.baseColor)[theme === 'light' ? 'lighten' : 'darken'](40 * (1.0 - country.z / 100));\n  }\n\n  function getOpacity(code) {\n    return code === 'AQ' ? 0 : 1;\n  }\n\n  function handleHover(code) {\n    if (code === 'AQ') return;\n    var country = data === null || data === void 0 ? void 0 : data.find(function (_ref3) {\n      var x = _ref3.x;\n      return x === code;\n    });\n    setTooltip(\"\".concat(countryNames[code], \": \").concat((country === null || country === void 0 ? void 0 : country.y) || 0, \" visitors\"));\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classNames(styles.container, className),\n    \"data-tip\": \"\",\n    \"data-for\": \"world-map-tooltip\",\n    children: [/*#__PURE__*/_jsx(ComposableMap, {\n      projection: \"geoMercator\",\n      children: /*#__PURE__*/_jsx(ZoomableGroup, {\n        zoom: 0.8,\n        minZoom: 0.7,\n        center: [0, 40],\n        children: /*#__PURE__*/_jsx(Geographies, {\n          geography: \"\".concat(basePath).concat(MAP_FILE),\n          children: function children(_ref4) {\n            var geographies = _ref4.geographies;\n            return geographies.map(function (geo) {\n              var code = ISO_COUNTRIES[geo.id];\n              return /*#__PURE__*/_jsx(Geography, {\n                geography: geo,\n                fill: getFillColor(code),\n                stroke: colors.strokeColor,\n                opacity: getOpacity(code),\n                style: {\n                  \"default\": {\n                    outline: 'none'\n                  },\n                  hover: {\n                    outline: 'none',\n                    fill: colors.hoverColor\n                  },\n                  pressed: {\n                    outline: 'none'\n                  }\n                },\n                onMouseOver: function onMouseOver() {\n                  return handleHover(code);\n                },\n                onMouseOut: function onMouseOut() {\n                  return setTooltip(null);\n                }\n              }, geo.rsmKey);\n            });\n          }\n        })\n      })\n    }), /*#__PURE__*/_jsx(ReactTooltip, {\n      id: \"world-map-tooltip\",\n      children: tooltip\n    })]\n  });\n}\n\nexport default WorldMap;","map":null,"metadata":{},"sourceType":"module"}