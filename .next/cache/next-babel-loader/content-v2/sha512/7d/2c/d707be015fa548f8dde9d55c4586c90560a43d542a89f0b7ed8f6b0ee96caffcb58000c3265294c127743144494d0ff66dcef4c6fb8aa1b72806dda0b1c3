{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport classNames from 'classnames';\nimport Icon from './Icon';\nimport styles from './Button.module.css';\n\nfunction Button(_ref) {\n  let {\n    type = 'button',\n    icon,\n    size,\n    variant,\n    children,\n    className,\n    tooltip,\n    tooltipId,\n    disabled,\n    iconRight,\n    onClick = () => {}\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"type\", \"icon\", \"size\", \"variant\", \"children\", \"className\", \"tooltip\", \"tooltipId\", \"disabled\", \"iconRight\", \"onClick\"]);\n\n  return /*#__PURE__*/_jsxs(\"button\", _objectSpread(_objectSpread({\n    \"data-tip\": tooltip,\n    \"data-effect\": \"solid\",\n    \"data-for\": tooltipId,\n    type: type,\n    className: classNames(styles.button, className, {\n      [styles.large]: size === 'large',\n      [styles.small]: size === 'small',\n      [styles.xsmall]: size === 'xsmall',\n      [styles.action]: variant === 'action',\n      [styles.danger]: variant === 'danger',\n      [styles.light]: variant === 'light',\n      [styles.iconRight]: iconRight\n    }),\n    disabled: disabled,\n    onClick: !disabled ? onClick : null\n  }, props), {}, {\n    children: [icon && /*#__PURE__*/_jsx(Icon, {\n      className: styles.icon,\n      icon: icon,\n      size: size\n    }), children && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.label,\n      children: children\n    }), tooltip && /*#__PURE__*/_jsx(ReactTooltip, {\n      id: tooltipId,\n      children: tooltip\n    })]\n  }));\n}\n\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}