{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeUrl } from './url';\nexport const apiRequest = (method, url, body, headers) => fetch(url, {\n  method,\n  cache: 'no-cache',\n  credentials: 'same-origin',\n  headers: _objectSpread({\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }, headers),\n  body\n}).then(res => {\n  if (res.ok) {\n    return res.json().then(data => ({\n      ok: res.ok,\n      status: res.status,\n      data\n    }));\n  }\n\n  return res.text().then(data => ({\n    ok: res.ok,\n    status: res.status,\n    res: res,\n    data\n  }));\n});\nexport const get = (url, params, headers) => apiRequest('get', makeUrl(url, params), undefined, headers);\nexport const del = (url, params, headers) => apiRequest('delete', makeUrl(url, params), undefined, headers);\nexport const post = (url, params, headers) => apiRequest('post', url, JSON.stringify(params), headers);\nexport const put = (url, params, headers) => apiRequest('put', url, JSON.stringify(params), headers);\nexport const hook = (_this, method, callback) => {\n  const orig = _this[method];\n  return (...args) => {\n    callback.apply(null, args);\n    return orig.apply(_this, args);\n  };\n};\nexport const doNotTrack = () => {\n  const {\n    doNotTrack,\n    navigator,\n    external\n  } = window;\n\n  const msTracking = () => {\n    return external && typeof external.msTrackingProtectionEnabled === 'function' && external.msTrackingProtectionEnabled();\n  };\n\n  const dnt = doNotTrack || navigator.doNotTrack || navigator.msDoNotTrack || msTracking();\n  return dnt === true || dnt === 1 || dnt === 'yes' || dnt === '1';\n};\nexport const setItem = (key, data, session) => {\n  if (false) {\n    (session ? sessionStorage : localStorage).setItem(key, JSON.stringify(data));\n  }\n};\nexport const getItem = (key, session) => false ? JSON.parse((session ? sessionStorage : localStorage).getItem(key)) : null;","map":null,"metadata":{},"sourceType":"module"}