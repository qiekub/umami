{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport Link from 'next/link';\nimport FilterButtons from 'components/common/FilterButtons';\nimport { urlFilter } from 'lib/filters';\nimport usePageQuery from 'hooks/usePageQuery';\nimport MetricsTable from './MetricsTable';\nimport styles from './PagesTable.module.css';\nexport const FILTER_COMBINED = 0;\nexport const FILTER_RAW = 1;\nexport default function PagesTable(_ref) {\n  let {\n    websiteId,\n    websiteDomain,\n    showFilters\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"websiteId\", \"websiteDomain\", \"showFilters\"]);\n\n  const {\n    0: filter,\n    1: setFilter\n  } = useState(FILTER_COMBINED);\n  const {\n    resolve,\n    query: {\n      url\n    }\n  } = usePageQuery();\n  const buttons = [{\n    label: /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"metrics.filter.combined\",\n      defaultMessage: \"Combined\"\n    }),\n    value: FILTER_COMBINED\n  }, {\n    label: /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"metrics.filter.raw\",\n      defaultMessage: \"Raw\"\n    }),\n    value: FILTER_RAW\n  }];\n\n  const renderLink = ({\n    x\n  }) => {\n    return /*#__PURE__*/_jsx(Link, {\n      href: resolve({\n        url: x\n      }),\n      replace: true,\n      children: /*#__PURE__*/_jsx(\"a\", {\n        className: classNames({\n          [styles.inactive]: url && x !== url,\n          [styles.active]: x === url\n        }),\n        children: decodeURI(x)\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [showFilters && /*#__PURE__*/_jsx(FilterButtons, {\n      buttons: buttons,\n      selected: filter,\n      onClick: setFilter\n    }), /*#__PURE__*/_jsx(MetricsTable, _objectSpread({\n      title: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"metrics.pages\",\n        defaultMessage: \"Pages\"\n      }),\n      type: \"url\",\n      metric: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"metrics.views\",\n        defaultMessage: \"Views\"\n      }),\n      websiteId: websiteId,\n      dataFilter: urlFilter,\n      filterOptions: {\n        domain: websiteDomain,\n        raw: filter === FILTER_RAW\n      },\n      renderLabel: renderLink\n    }, props))]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}