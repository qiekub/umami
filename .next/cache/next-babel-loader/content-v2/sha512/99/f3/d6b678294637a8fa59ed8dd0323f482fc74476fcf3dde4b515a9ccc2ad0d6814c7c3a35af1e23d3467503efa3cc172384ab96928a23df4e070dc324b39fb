{"ast":null,"code":"import _regeneratorRuntime from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { get } from 'lib/web';\nimport { setShareToken } from 'redux/actions/app';\nexport default function useShareToken(shareId) {\n  var _useRouter = useRouter(),\n      basePath = _useRouter.basePath;\n\n  var dispatch = useDispatch();\n  var shareToken = useSelector(function (state) {\n    return state.app.shareToken;\n  });\n\n  function loadToken(_x) {\n    return _loadToken.apply(this, arguments);\n  }\n\n  function _loadToken() {\n    _loadToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      var _yield$get, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return get(\"\".concat(basePath, \"/api/share/\").concat(id));\n\n            case 2:\n              _yield$get = _context.sent;\n              data = _yield$get.data;\n\n              if (data) {\n                dispatch(setShareToken(data));\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _loadToken.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    if (shareId) {\n      loadToken(shareId);\n    }\n  }, [shareId]);\n  return shareToken;\n}","map":null,"metadata":{},"sourceType":"module"}