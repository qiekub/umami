{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { isAfter, isBefore, isSameDay } from 'date-fns';\nimport Calendar from 'components/common/Calendar';\nimport Button from 'components/common/Button';\nimport { FormButtons } from 'components/layout/FormLayout';\nimport { getDateRangeValues } from 'lib/date';\nimport styles from './DatePickerForm.module.css';\nimport ButtonGroup from 'components/common/ButtonGroup';\nconst FILTER_DAY = 0;\nconst FILTER_RANGE = 1;\nexport default function DatePickerForm({\n  startDate: defaultStartDate,\n  endDate: defaultEndDate,\n  minDate,\n  maxDate,\n  onChange,\n  onClose\n}) {\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(isSameDay(defaultStartDate, defaultEndDate) ? FILTER_DAY : FILTER_RANGE);\n  const {\n    0: date,\n    1: setDate\n  } = useState(defaultStartDate);\n  const {\n    0: startDate,\n    1: setStartDate\n  } = useState(defaultStartDate);\n  const {\n    0: endDate,\n    1: setEndDate\n  } = useState(defaultEndDate);\n  const disabled = selected === FILTER_DAY ? isAfter(minDate, date) && isBefore(maxDate, date) : isAfter(startDate, endDate);\n  const buttons = [{\n    label: /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"label.single-day\",\n      defaultMessage: \"Single day\"\n    }),\n    value: FILTER_DAY\n  }, {\n    label: /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"label.date-range\",\n      defaultMessage: \"Date range\"\n    }),\n    value: FILTER_RANGE\n  }];\n\n  function handleSave() {\n    if (selected === FILTER_DAY) {\n      onChange(_objectSpread(_objectSpread({}, getDateRangeValues(date, date)), {}, {\n        value: 'custom'\n      }));\n    } else {\n      onChange(_objectSpread(_objectSpread({}, getDateRangeValues(startDate, endDate)), {}, {\n        value: 'custom'\n      }));\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.filter,\n      children: /*#__PURE__*/_jsx(ButtonGroup, {\n        size: \"small\",\n        items: buttons,\n        selectedItem: selected,\n        onClick: setSelected\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.calendars,\n      children: selected === FILTER_DAY ? /*#__PURE__*/_jsx(Calendar, {\n        date: date,\n        minDate: minDate,\n        maxDate: maxDate,\n        onChange: setDate\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(Calendar, {\n          date: startDate,\n          minDate: minDate,\n          maxDate: endDate,\n          onChange: setStartDate\n        }), /*#__PURE__*/_jsx(Calendar, {\n          date: endDate,\n          minDate: startDate,\n          maxDate: maxDate,\n          onChange: setEndDate\n        })]\n      })\n    }), /*#__PURE__*/_jsxs(FormButtons, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        variant: \"action\",\n        onClick: handleSave,\n        disabled: disabled,\n        children: /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"label.save\",\n          defaultMessage: \"Save\"\n        })\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onClose,\n        children: /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"label.cancel\",\n          defaultMessage: \"Cancel\"\n        })\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}