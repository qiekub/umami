{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst websites = createSlice({\n  name: 'websites',\n  initialState: {},\n  reducers: {\n    updateWebsites(state, action) {\n      state = action.payload;\n      return state;\n    },\n\n    updateWebsite(state, action) {\n      const _action$payload = action.payload,\n            {\n        websiteId\n      } = _action$payload,\n            data = _objectWithoutProperties(_action$payload, [\"websiteId\"]);\n\n      state[websiteId] = data;\n      return state;\n    }\n\n  }\n});\nexport const {\n  updateWebsites,\n  updateWebsite\n} = websites.actions;\nexport default websites.reducer;\nexport function setDateRange(websiteId, dateRange) {\n  return dispatch => {\n    return dispatch(updateWebsite({\n      websiteId,\n      dateRange: _objectSpread(_objectSpread({}, dateRange), {}, {\n        modified: Date.now()\n      })\n    }));\n  };\n}","map":null,"metadata":{},"sourceType":"module"}