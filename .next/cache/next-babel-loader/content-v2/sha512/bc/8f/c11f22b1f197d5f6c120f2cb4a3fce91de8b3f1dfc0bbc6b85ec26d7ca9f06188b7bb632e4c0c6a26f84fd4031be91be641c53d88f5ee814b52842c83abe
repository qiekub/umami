{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useMemo } from 'react';\nimport tinycolor from 'tinycolor2';\nimport BarChart from './BarChart';\nimport { getDateArray, getDateLength } from 'lib/date';\nimport useFetch from 'hooks/useFetch';\nimport useDateRange from 'hooks/useDateRange';\nimport useTimezone from 'hooks/useTimezone';\nimport usePageQuery from 'hooks/usePageQuery';\nimport useShareToken from 'hooks/useShareToken';\nimport { EVENT_COLORS, TOKEN_HEADER } from 'lib/constants';\nexport default function EventsChart({\n  websiteId,\n  className,\n  token\n}) {\n  const [dateRange] = useDateRange(websiteId);\n  const {\n    startDate,\n    endDate,\n    unit,\n    modified\n  } = dateRange;\n  const [timezone] = useTimezone();\n  const {\n    query\n  } = usePageQuery();\n  const shareToken = useShareToken();\n  const {\n    data,\n    loading\n  } = useFetch(`/api/website/${websiteId}/events`, {\n    params: {\n      start_at: +startDate,\n      end_at: +endDate,\n      unit,\n      tz: timezone,\n      url: query.url,\n      token\n    },\n    headers: {\n      [TOKEN_HEADER]: shareToken === null || shareToken === void 0 ? void 0 : shareToken.token\n    }\n  }, [modified]);\n  const datasets = useMemo(() => {\n    if (!data) return [];\n    if (loading) return data;\n    const map = data.reduce((obj, {\n      x,\n      t,\n      y\n    }) => {\n      if (!obj[x]) {\n        obj[x] = [];\n      }\n\n      obj[x].push({\n        t,\n        y\n      });\n      return obj;\n    }, {});\n    Object.keys(map).forEach(key => {\n      map[key] = getDateArray(map[key], startDate, endDate, unit);\n    });\n    return Object.keys(map).map((key, index) => {\n      const color = tinycolor(EVENT_COLORS[index % EVENT_COLORS.length]);\n      return {\n        label: key,\n        data: map[key],\n        lineTension: 0,\n        backgroundColor: color.setAlpha(0.6).toRgbString(),\n        borderColor: color.setAlpha(0.7).toRgbString(),\n        borderWidth: 1\n      };\n    });\n  }, [data, loading]);\n\n  function handleUpdate(chart) {\n    chart.data.datasets = datasets;\n    chart.update();\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(BarChart, {\n    chartId: `events-${websiteId}`,\n    className: className,\n    datasets: datasets,\n    unit: unit,\n    height: 300,\n    records: getDateLength(startDate, endDate, unit),\n    onUpdate: handleUpdate,\n    loading: loading,\n    stacked: true\n  });\n}","map":null,"metadata":{},"sourceType":"module"}