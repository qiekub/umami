{"ast":null,"code":"import _defineProperty from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _objectWithoutProperties from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useMemo, useRef } from 'react';\nimport { format, parseISO, startOfMinute, subMinutes, isBefore } from 'date-fns';\nimport PageviewsChart from './PageviewsChart';\nimport { getDateArray } from 'lib/date';\nimport { DEFAULT_ANIMATION_DURATION, REALTIME_RANGE } from 'lib/constants';\n\nfunction mapData(data) {\n  var last = 0;\n  var arr = [];\n  data.reduce(function (obj, val) {\n    var created_at = val.created_at;\n    var t = startOfMinute(parseISO(created_at));\n\n    if (t.getTime() > last) {\n      obj = {\n        t: format(t, 'yyyy-LL-dd HH:mm:00'),\n        y: 1\n      };\n      arr.push(obj);\n      last = t;\n    } else {\n      obj.y += 1;\n    }\n\n    return obj;\n  }, {});\n  return arr;\n}\n\nexport default function RealtimeChart(_ref) {\n  var data = _ref.data,\n      unit = _ref.unit,\n      props = _objectWithoutProperties(_ref, [\"data\", \"unit\"]);\n\n  var endDate = startOfMinute(new Date());\n  var startDate = subMinutes(endDate, REALTIME_RANGE);\n  var prevEndDate = useRef(endDate);\n  var chartData = useMemo(function () {\n    if (data) {\n      return {\n        pageviews: getDateArray(mapData(data.pageviews), startDate, endDate, unit),\n        sessions: getDateArray(mapData(data.sessions), startDate, endDate, unit)\n      };\n    }\n\n    return {\n      pageviews: [],\n      sessions: []\n    };\n  }, [data]); // Don't animate the bars shifting over because it looks weird\n\n  var animationDuration = useMemo(function () {\n    if (isBefore(prevEndDate.current, endDate)) {\n      prevEndDate.current = endDate;\n      return 0;\n    }\n\n    return DEFAULT_ANIMATION_DURATION;\n  }, [data]);\n  return /*#__PURE__*/_jsx(PageviewsChart, _objectSpread(_objectSpread({}, props), {}, {\n    height: 200,\n    unit: unit,\n    data: chartData,\n    animationDuration: animationDuration\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}