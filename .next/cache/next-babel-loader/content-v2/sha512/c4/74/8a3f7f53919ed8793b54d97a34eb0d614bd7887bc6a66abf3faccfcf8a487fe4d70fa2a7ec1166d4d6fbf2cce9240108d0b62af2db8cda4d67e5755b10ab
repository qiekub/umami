{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst queries = createSlice({\n  name: 'queries',\n  initialState: {},\n  reducers: {\n    updateQuery(state, action) {\n      const _action$payload = action.payload,\n            {\n        url\n      } = _action$payload,\n            data = _objectWithoutProperties(_action$payload, [\"url\"]);\n\n      state[url] = data;\n      return state;\n    }\n\n  }\n});\nexport const {\n  updateQuery\n} = queries.actions;\nexport default queries.reducer;","map":null,"metadata":{},"sourceType":"module"}