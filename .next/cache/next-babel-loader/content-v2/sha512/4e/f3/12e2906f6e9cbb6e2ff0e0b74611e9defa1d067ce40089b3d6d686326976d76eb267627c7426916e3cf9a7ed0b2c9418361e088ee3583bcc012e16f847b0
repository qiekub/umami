{"ast":null,"code":"import { parse } from 'cookie';\nimport { parseSecureToken, parseToken } from './crypto';\nimport { AUTH_COOKIE_NAME, TOKEN_HEADER } from './constants';\nimport { getWebsiteById } from './queries';\nexport async function getAuthToken(req) {\n  const token = parse(req.headers.cookie || '')[AUTH_COOKIE_NAME];\n  return parseSecureToken(token);\n}\nexport async function isValidToken(token, validation) {\n  try {\n    const result = await parseToken(token);\n\n    if (typeof validation === 'object') {\n      return !Object.keys(validation).find(key => result[key] !== validation[key]);\n    } else if (typeof validation === 'function') {\n      return validation(result);\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return false;\n}\nexport async function allowQuery(req, skipToken) {\n  const {\n    id\n  } = req.query;\n  const token = req.headers[TOKEN_HEADER];\n  const websiteId = +id;\n  const website = await getWebsiteById(websiteId);\n\n  if (website) {\n    if (token && token !== 'undefined' && !skipToken) {\n      return isValidToken(token, {\n        website_id: websiteId\n      });\n    }\n\n    const authToken = await getAuthToken(req);\n\n    if (authToken) {\n      const {\n        user_id,\n        is_admin\n      } = authToken;\n      return is_admin || website.user_id === user_id;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}