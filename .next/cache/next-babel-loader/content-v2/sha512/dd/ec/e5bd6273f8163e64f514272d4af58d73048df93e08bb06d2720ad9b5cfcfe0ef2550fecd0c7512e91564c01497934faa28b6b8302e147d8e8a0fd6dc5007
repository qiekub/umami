{"ast":null,"code":"import _defineProperty from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport { getQueryString } from 'lib/url';\nexport default function usePageQuery() {\n  var router = useRouter();\n  var _location = location,\n      pathname = _location.pathname,\n      search = _location.search;\n  var query = useMemo(function () {\n    if (!search) {\n      return {};\n    }\n\n    var params = search.substring(1).split('&');\n    return params.reduce(function (obj, item) {\n      var _item$split = item.split('='),\n          _item$split2 = _slicedToArray(_item$split, 2),\n          key = _item$split2[0],\n          value = _item$split2[1];\n\n      obj[key] = decodeURIComponent(value);\n      return obj;\n    }, {});\n  }, [search]);\n\n  function resolve(params) {\n    var search = getQueryString(_objectSpread(_objectSpread({}, query), params));\n    var asPath = router.asPath;\n    return \"\".concat(asPath.split('?')[0]).concat(search);\n  }\n\n  return {\n    pathname: pathname,\n    query: query,\n    resolve: resolve,\n    router: router\n  };\n}","map":null,"metadata":{},"sourceType":"module"}