{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { subMinutes, startOfMinute } from 'date-fns';\nimport firstBy from 'thenby';\nimport Page from 'components/layout/Page';\nimport GridLayout, { GridRow, GridColumn } from 'components/layout/GridLayout';\nimport RealtimeChart from 'components/metrics/RealtimeChart';\nimport RealtimeLog from 'components/metrics/RealtimeLog';\nimport RealtimeHeader from 'components/metrics/RealtimeHeader';\nimport WorldMap from 'components/common/WorldMap';\nimport DataTable from 'components/metrics/DataTable';\nimport RealtimeViews from 'components/metrics/RealtimeViews';\nimport useFetch from 'hooks/useFetch';\nimport useLocale from 'hooks/useLocale';\nimport useCountryNames from 'hooks/useCountryNames';\nimport { percentFilter } from 'lib/filters';\nimport { TOKEN_HEADER, REALTIME_RANGE, REALTIME_INTERVAL } from 'lib/constants';\nimport styles from './RealtimeDashboard.module.css';\n\nfunction mergeData(state, data, time) {\n  var ids = state.map(function (_ref) {\n    var __id = _ref.__id;\n    return __id;\n  });\n  return state.concat(data.filter(function (_ref2) {\n    var __id = _ref2.__id;\n    return !ids.includes(__id);\n  })).filter(function (_ref3) {\n    var created_at = _ref3.created_at;\n    return new Date(created_at).getTime() >= time;\n  });\n}\n\nfunction filterWebsite(data, id) {\n  return data.filter(function (_ref4) {\n    var website_id = _ref4.website_id;\n    return website_id === id;\n  });\n}\n\nexport default function RealtimeDashboard() {\n  var _init$websites;\n\n  var _useLocale = useLocale(),\n      _useLocale2 = _slicedToArray(_useLocale, 1),\n      locale = _useLocale2[0];\n\n  var countryNames = useCountryNames(locale);\n\n  var _useState = useState(),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(0),\n      websiteId = _useState2[0],\n      setWebsiteId = _useState2[1];\n\n  var _useFetch = useFetch('/api/realtime/init'),\n      init = _useFetch.data,\n      loading = _useFetch.loading;\n\n  var _useFetch2 = useFetch('/api/realtime/update', {\n    params: {\n      start_at: data === null || data === void 0 ? void 0 : data.timestamp\n    },\n    disabled: !(init !== null && init !== void 0 && (_init$websites = init.websites) !== null && _init$websites !== void 0 && _init$websites.length) || !data,\n    interval: REALTIME_INTERVAL,\n    headers: _defineProperty({}, TOKEN_HEADER, init === null || init === void 0 ? void 0 : init.token)\n  }),\n      updates = _useFetch2.data;\n\n  var renderCountryName = useCallback(function (_ref5) {\n    var x = _ref5.x;\n    return /*#__PURE__*/_jsx(\"span\", {\n      className: locale,\n      children: countryNames[x]\n    });\n  }, [countryNames]);\n  var realtimeData = useMemo(function () {\n    if (data) {\n      var pageviews = data.pageviews,\n          sessions = data.sessions,\n          events = data.events;\n\n      if (websiteId) {\n        return {\n          pageviews: filterWebsite(pageviews, websiteId),\n          sessions: filterWebsite(sessions, websiteId),\n          events: filterWebsite(events, websiteId)\n        };\n      }\n    }\n\n    return data;\n  }, [data, websiteId]);\n  var countries = useMemo(function () {\n    if (realtimeData !== null && realtimeData !== void 0 && realtimeData.sessions) {\n      return percentFilter(realtimeData.sessions.reduce(function (arr, _ref6) {\n        var country = _ref6.country;\n\n        if (country) {\n          var row = arr.find(function (_ref7) {\n            var x = _ref7.x;\n            return x === country;\n          });\n\n          if (!row) {\n            arr.push({\n              x: country,\n              y: 1\n            });\n          } else {\n            row.y += 1;\n          }\n        }\n\n        return arr;\n      }, []).sort(firstBy('y', -1)));\n    }\n\n    return [];\n  }, [realtimeData === null || realtimeData === void 0 ? void 0 : realtimeData.sessions]);\n  useEffect(function () {\n    if (init && !data) {\n      var _websites = init.websites,\n          _data = init.data;\n      setData(_objectSpread({\n        websites: _websites\n      }, _data));\n    }\n  }, [init]);\n  useEffect(function () {\n    if (updates) {\n      var pageviews = updates.pageviews,\n          sessions = updates.sessions,\n          events = updates.events,\n          timestamp = updates.timestamp;\n      var time = subMinutes(startOfMinute(new Date()), REALTIME_RANGE).getTime();\n      setData(function (state) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          pageviews: mergeData(state.pageviews, pageviews, time),\n          sessions: mergeData(state.sessions, sessions, time),\n          events: mergeData(state.events, events, time),\n          timestamp: timestamp\n        });\n      });\n    }\n  }, [updates]);\n\n  if (!init || !data || loading) {\n    return null;\n  }\n\n  var websites = data.websites;\n  return /*#__PURE__*/_jsxs(Page, {\n    children: [/*#__PURE__*/_jsx(RealtimeHeader, {\n      websites: websites,\n      websiteId: websiteId,\n      data: _objectSpread(_objectSpread({}, realtimeData), {}, {\n        countries: countries\n      }),\n      onSelect: setWebsiteId\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.chart,\n      children: /*#__PURE__*/_jsx(RealtimeChart, {\n        websiteId: websiteId,\n        data: realtimeData,\n        unit: \"minute\",\n        records: REALTIME_RANGE\n      })\n    }), /*#__PURE__*/_jsxs(GridLayout, {\n      children: [/*#__PURE__*/_jsxs(GridRow, {\n        children: [/*#__PURE__*/_jsx(GridColumn, {\n          xs: 12,\n          lg: 4,\n          children: /*#__PURE__*/_jsx(RealtimeViews, {\n            websiteId: websiteId,\n            data: realtimeData,\n            websites: websites\n          })\n        }), /*#__PURE__*/_jsx(GridColumn, {\n          xs: 12,\n          lg: 8,\n          children: /*#__PURE__*/_jsx(RealtimeLog, {\n            websiteId: websiteId,\n            data: realtimeData,\n            websites: websites\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(GridRow, {\n        children: [/*#__PURE__*/_jsx(GridColumn, {\n          xs: 12,\n          lg: 4,\n          children: /*#__PURE__*/_jsx(DataTable, {\n            title: /*#__PURE__*/_jsx(FormattedMessage, {\n              id: \"metrics.countries\",\n              defaultMessage: \"Countries\"\n            }),\n            metric: /*#__PURE__*/_jsx(FormattedMessage, {\n              id: \"metrics.visitors\",\n              defaultMessage: \"Visitors\"\n            }),\n            data: countries,\n            renderLabel: renderCountryName,\n            height: 500\n          })\n        }), /*#__PURE__*/_jsx(GridColumn, {\n          xs: 12,\n          lg: 8,\n          children: /*#__PURE__*/_jsx(WorldMap, {\n            data: countries\n          })\n        })]\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}