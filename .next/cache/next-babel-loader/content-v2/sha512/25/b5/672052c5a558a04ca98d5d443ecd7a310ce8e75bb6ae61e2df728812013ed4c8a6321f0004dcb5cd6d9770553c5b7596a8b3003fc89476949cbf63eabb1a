{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { subMinutes, startOfMinute } from 'date-fns';\nimport firstBy from 'thenby';\nimport Page from 'components/layout/Page';\nimport GridLayout, { GridRow, GridColumn } from 'components/layout/GridLayout';\nimport RealtimeChart from 'components/metrics/RealtimeChart';\nimport RealtimeLog from 'components/metrics/RealtimeLog';\nimport RealtimeHeader from 'components/metrics/RealtimeHeader';\nimport WorldMap from 'components/common/WorldMap';\nimport DataTable from 'components/metrics/DataTable';\nimport RealtimeViews from 'components/metrics/RealtimeViews';\nimport useFetch from 'hooks/useFetch';\nimport useLocale from 'hooks/useLocale';\nimport useCountryNames from 'hooks/useCountryNames';\nimport { percentFilter } from 'lib/filters';\nimport { TOKEN_HEADER, REALTIME_RANGE, REALTIME_INTERVAL } from 'lib/constants';\nimport styles from './RealtimeDashboard.module.css';\n\nfunction mergeData(state, data, time) {\n  const ids = state.map(({\n    __id\n  }) => __id);\n  return state.concat(data.filter(({\n    __id\n  }) => !ids.includes(__id))).filter(({\n    created_at\n  }) => new Date(created_at).getTime() >= time);\n}\n\nfunction filterWebsite(data, id) {\n  return data.filter(({\n    website_id\n  }) => website_id === id);\n}\n\nexport default function RealtimeDashboard() {\n  var _init$websites;\n\n  const [locale] = useLocale();\n  const countryNames = useCountryNames(locale);\n  const {\n    0: data,\n    1: setData\n  } = useState();\n  const {\n    0: websiteId,\n    1: setWebsiteId\n  } = useState(0);\n  const {\n    data: init,\n    loading\n  } = useFetch('/api/realtime/init');\n  const {\n    data: updates\n  } = useFetch('/api/realtime/update', {\n    params: {\n      start_at: data === null || data === void 0 ? void 0 : data.timestamp\n    },\n    disabled: !(init !== null && init !== void 0 && (_init$websites = init.websites) !== null && _init$websites !== void 0 && _init$websites.length) || !data,\n    interval: REALTIME_INTERVAL,\n    headers: {\n      [TOKEN_HEADER]: init === null || init === void 0 ? void 0 : init.token\n    }\n  });\n  const renderCountryName = useCallback(({\n    x\n  }) => /*#__PURE__*/_jsx(\"span\", {\n    className: locale,\n    children: countryNames[x]\n  }), [countryNames]);\n  const realtimeData = useMemo(() => {\n    if (data) {\n      const {\n        pageviews,\n        sessions,\n        events\n      } = data;\n\n      if (websiteId) {\n        return {\n          pageviews: filterWebsite(pageviews, websiteId),\n          sessions: filterWebsite(sessions, websiteId),\n          events: filterWebsite(events, websiteId)\n        };\n      }\n    }\n\n    return data;\n  }, [data, websiteId]);\n  const countries = useMemo(() => {\n    if (realtimeData !== null && realtimeData !== void 0 && realtimeData.sessions) {\n      return percentFilter(realtimeData.sessions.reduce((arr, {\n        country\n      }) => {\n        if (country) {\n          const row = arr.find(({\n            x\n          }) => x === country);\n\n          if (!row) {\n            arr.push({\n              x: country,\n              y: 1\n            });\n          } else {\n            row.y += 1;\n          }\n        }\n\n        return arr;\n      }, []).sort(firstBy('y', -1)));\n    }\n\n    return [];\n  }, [realtimeData === null || realtimeData === void 0 ? void 0 : realtimeData.sessions]);\n  useEffect(() => {\n    if (init && !data) {\n      const {\n        websites,\n        data\n      } = init;\n      setData(_objectSpread({\n        websites\n      }, data));\n    }\n  }, [init]);\n  useEffect(() => {\n    if (updates) {\n      const {\n        pageviews,\n        sessions,\n        events,\n        timestamp\n      } = updates;\n      const time = subMinutes(startOfMinute(new Date()), REALTIME_RANGE).getTime();\n      setData(state => _objectSpread(_objectSpread({}, state), {}, {\n        pageviews: mergeData(state.pageviews, pageviews, time),\n        sessions: mergeData(state.sessions, sessions, time),\n        events: mergeData(state.events, events, time),\n        timestamp\n      }));\n    }\n  }, [updates]);\n\n  if (!init || !data || loading) {\n    return null;\n  }\n\n  const {\n    websites\n  } = data;\n  return /*#__PURE__*/_jsxs(Page, {\n    children: [/*#__PURE__*/_jsx(RealtimeHeader, {\n      websites: websites,\n      websiteId: websiteId,\n      data: _objectSpread(_objectSpread({}, realtimeData), {}, {\n        countries\n      }),\n      onSelect: setWebsiteId\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.chart,\n      children: /*#__PURE__*/_jsx(RealtimeChart, {\n        websiteId: websiteId,\n        data: realtimeData,\n        unit: \"minute\",\n        records: REALTIME_RANGE\n      })\n    }), /*#__PURE__*/_jsxs(GridLayout, {\n      children: [/*#__PURE__*/_jsxs(GridRow, {\n        children: [/*#__PURE__*/_jsx(GridColumn, {\n          xs: 12,\n          lg: 4,\n          children: /*#__PURE__*/_jsx(RealtimeViews, {\n            websiteId: websiteId,\n            data: realtimeData,\n            websites: websites\n          })\n        }), /*#__PURE__*/_jsx(GridColumn, {\n          xs: 12,\n          lg: 8,\n          children: /*#__PURE__*/_jsx(RealtimeLog, {\n            websiteId: websiteId,\n            data: realtimeData,\n            websites: websites\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(GridRow, {\n        children: [/*#__PURE__*/_jsx(GridColumn, {\n          xs: 12,\n          lg: 4,\n          children: /*#__PURE__*/_jsx(DataTable, {\n            title: /*#__PURE__*/_jsx(FormattedMessage, {\n              id: \"metrics.countries\",\n              defaultMessage: \"Countries\"\n            }),\n            metric: /*#__PURE__*/_jsx(FormattedMessage, {\n              id: \"metrics.visitors\",\n              defaultMessage: \"Visitors\"\n            }),\n            data: countries,\n            renderLabel: renderCountryName,\n            height: 500\n          })\n        }), /*#__PURE__*/_jsx(GridColumn, {\n          xs: 12,\n          lg: 8,\n          children: /*#__PURE__*/_jsx(WorldMap, {\n            data: countries\n          })\n        })]\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}