{"ast":null,"code":"import { getPageviewMetrics, getSessionMetrics, getWebsiteById } from 'lib/queries';\nimport { ok, methodNotAllowed, unauthorized, badRequest } from 'lib/response';\nimport { allowQuery } from 'lib/auth';\nconst sessionColumns = ['browser', 'os', 'device', 'country'];\nconst pageviewColumns = ['url', 'referrer'];\n\nfunction getTable(type) {\n  if (type === 'event') {\n    return 'event';\n  }\n\n  if (sessionColumns.includes(type)) {\n    return 'session';\n  }\n\n  return 'pageview';\n}\n\nfunction getColumn(type) {\n  if (type === 'event') {\n    return `concat(event_type, '\\t', event_value)`;\n  }\n\n  return type;\n}\n\nexport default (async (req, res) => {\n  if (req.method === 'GET') {\n    if (!(await allowQuery(req))) {\n      return unauthorized(res);\n    }\n\n    const {\n      id,\n      type,\n      start_at,\n      end_at,\n      url\n    } = req.query;\n    const websiteId = +id;\n    const startDate = new Date(+start_at);\n    const endDate = new Date(+end_at);\n\n    if (sessionColumns.includes(type)) {\n      const data = await getSessionMetrics(websiteId, startDate, endDate, type, {\n        url\n      });\n      return ok(res, data);\n    }\n\n    if (pageviewColumns.includes(type) || type === 'event') {\n      let domain;\n\n      if (type === 'referrer') {\n        const website = getWebsiteById(websiteId);\n\n        if (!website) {\n          return badRequest(res);\n        }\n\n        domain = website.domain;\n      }\n\n      const data = await getPageviewMetrics(websiteId, startDate, endDate, getColumn(type), getTable(type), {\n        domain,\n        url: type !== 'url' && url\n      });\n      return ok(res, data);\n    }\n  }\n\n  return methodNotAllowed(res);\n});","map":null,"metadata":{},"sourceType":"module"}