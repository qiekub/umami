{"ast":null,"code":"import _defineProperty from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nvar websites = createSlice({\n  name: 'websites',\n  initialState: {},\n  reducers: {\n    updateWebsites: function updateWebsites(state, action) {\n      state = action.payload;\n      return state;\n    },\n    updateWebsite: function updateWebsite(state, action) {\n      var _action$payload = action.payload,\n          websiteId = _action$payload.websiteId,\n          data = _objectWithoutProperties(_action$payload, [\"websiteId\"]);\n\n      state[websiteId] = data;\n      return state;\n    }\n  }\n});\nvar _websites$actions = websites.actions,\n    updateWebsites = _websites$actions.updateWebsites,\n    updateWebsite = _websites$actions.updateWebsite;\nexport { updateWebsites, updateWebsite };\nexport default websites.reducer;\nexport function setDateRange(websiteId, dateRange) {\n  return function (dispatch) {\n    return dispatch(updateWebsite({\n      websiteId: websiteId,\n      dateRange: _objectSpread(_objectSpread({}, dateRange), {}, {\n        modified: Date.now()\n      })\n    }));\n  };\n}","map":null,"metadata":{},"sourceType":"module"}