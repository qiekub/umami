{"ast":null,"code":"import { updateWebsite, createWebsite, getWebsiteById } from 'lib/queries';\nimport { useAuth } from 'lib/middleware';\nimport { uuid, getRandomChars } from 'lib/crypto';\nimport { ok, unauthorized, methodNotAllowed } from 'lib/response';\nexport default (async (req, res) => {\n  await useAuth(req, res);\n  const {\n    user_id,\n    is_admin\n  } = req.auth;\n  const {\n    website_id,\n    enable_share_url\n  } = req.body;\n\n  if (req.method === 'POST') {\n    const {\n      name,\n      domain\n    } = req.body;\n\n    if (website_id) {\n      const website = await getWebsiteById(website_id);\n\n      if (website.user_id !== user_id && !is_admin) {\n        return unauthorized(res);\n      }\n\n      let {\n        share_id\n      } = website;\n\n      if (enable_share_url) {\n        share_id = share_id ? share_id : getRandomChars(8);\n      } else {\n        share_id = null;\n      }\n\n      await updateWebsite(website_id, {\n        name,\n        domain,\n        share_id\n      });\n      return ok(res);\n    } else {\n      const website_uuid = uuid();\n      const share_id = enable_share_url ? getRandomChars(8) : null;\n      const website = await createWebsite(user_id, {\n        website_uuid,\n        name,\n        domain,\n        share_id\n      });\n      return ok(res, website);\n    }\n  }\n\n  return methodNotAllowed(res);\n});","map":null,"metadata":{},"sourceType":"module"}