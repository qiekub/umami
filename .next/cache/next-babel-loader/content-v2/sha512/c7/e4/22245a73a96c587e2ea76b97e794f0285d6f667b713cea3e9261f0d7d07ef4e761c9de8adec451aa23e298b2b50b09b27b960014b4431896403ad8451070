{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport ReactTooltip from 'react-tooltip';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\nimport classNames from 'classnames';\nimport tinycolor from 'tinycolor2';\nimport useTheme from 'hooks/useTheme';\nimport { ISO_COUNTRIES, THEME_COLORS, MAP_FILE } from 'lib/constants';\nimport styles from './WorldMap.module.css';\nimport useCountryNames from 'hooks/useCountryNames';\nimport useLocale from 'hooks/useLocale';\n\nfunction WorldMap({\n  data,\n  className\n}) {\n  const {\n    basePath\n  } = useRouter();\n  const {\n    0: tooltip,\n    1: setTooltip\n  } = useState();\n  const [theme] = useTheme();\n  const colors = useMemo(() => ({\n    baseColor: THEME_COLORS[theme].primary,\n    fillColor: THEME_COLORS[theme].gray100,\n    strokeColor: THEME_COLORS[theme].primary,\n    hoverColor: THEME_COLORS[theme].primary\n  }), [theme]);\n  const [locale] = useLocale();\n  const countryNames = useCountryNames(locale);\n\n  function getFillColor(code) {\n    if (code === 'AQ') return;\n    const country = data === null || data === void 0 ? void 0 : data.find(({\n      x\n    }) => x === code);\n\n    if (!country) {\n      return colors.fillColor;\n    }\n\n    return tinycolor(colors.baseColor)[theme === 'light' ? 'lighten' : 'darken'](40 * (1.0 - country.z / 100));\n  }\n\n  function getOpacity(code) {\n    return code === 'AQ' ? 0 : 1;\n  }\n\n  function handleHover(code) {\n    if (code === 'AQ') return;\n    const country = data === null || data === void 0 ? void 0 : data.find(({\n      x\n    }) => x === code);\n    setTooltip(`${countryNames[code]}: ${(country === null || country === void 0 ? void 0 : country.y) || 0} visitors`);\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classNames(styles.container, className),\n    \"data-tip\": \"\",\n    \"data-for\": \"world-map-tooltip\",\n    children: [/*#__PURE__*/_jsx(ComposableMap, {\n      projection: \"geoMercator\",\n      children: /*#__PURE__*/_jsx(ZoomableGroup, {\n        zoom: 0.8,\n        minZoom: 0.7,\n        center: [0, 40],\n        children: /*#__PURE__*/_jsx(Geographies, {\n          geography: `${basePath}${MAP_FILE}`,\n          children: ({\n            geographies\n          }) => {\n            return geographies.map(geo => {\n              const code = ISO_COUNTRIES[geo.id];\n              return /*#__PURE__*/_jsx(Geography, {\n                geography: geo,\n                fill: getFillColor(code),\n                stroke: colors.strokeColor,\n                opacity: getOpacity(code),\n                style: {\n                  default: {\n                    outline: 'none'\n                  },\n                  hover: {\n                    outline: 'none',\n                    fill: colors.hoverColor\n                  },\n                  pressed: {\n                    outline: 'none'\n                  }\n                },\n                onMouseOver: () => handleHover(code),\n                onMouseOut: () => setTooltip(null)\n              }, geo.rsmKey);\n            });\n          }\n        })\n      })\n    }), /*#__PURE__*/_jsx(ReactTooltip, {\n      id: \"world-map-tooltip\",\n      children: tooltip\n    })]\n  });\n}\n\nexport default WorldMap;","map":null,"metadata":{},"sourceType":"module"}