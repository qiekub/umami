{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { startOfWeek, startOfMonth, startOfYear, endOfMonth, addDays, subDays, addYears, subYears, addMonths, setMonth, setYear, isSameDay, isBefore, isAfter } from 'date-fns';\nimport Button from './Button';\nimport useLocale from 'hooks/useLocale';\nimport { dateFormat } from 'lib/date';\nimport { chunk } from 'lib/array';\nimport { dateLocales } from 'lib/lang';\nimport Chevron from 'assets/chevron-down.svg';\nimport Cross from 'assets/times.svg';\nimport styles from './Calendar.module.css';\nimport Icon from './Icon';\nexport default function Calendar({\n  date,\n  minDate,\n  maxDate,\n  onChange\n}) {\n  const [locale] = useLocale();\n  const {\n    0: selectMonth,\n    1: setSelectMonth\n  } = useState(false);\n  const {\n    0: selectYear,\n    1: setSelectYear\n  } = useState(false);\n  const month = dateFormat(date, 'MMMM', locale);\n  const year = date.getFullYear();\n\n  function toggleMonthSelect() {\n    setSelectYear(false);\n    setSelectMonth(state => !state);\n  }\n\n  function toggleYearSelect() {\n    setSelectMonth(false);\n    setSelectYear(state => !state);\n  }\n\n  function handleChange(value) {\n    setSelectMonth(false);\n    setSelectYear(false);\n\n    if (value) {\n      onChange(value);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.calendar,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        children: date.getDate()\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: classNames(styles.selector, {\n          [styles.open]: selectMonth\n        }),\n        onClick: toggleMonthSelect,\n        children: [month, /*#__PURE__*/_jsx(Icon, {\n          className: styles.icon,\n          icon: selectMonth ? /*#__PURE__*/_jsx(Cross, {}) : /*#__PURE__*/_jsx(Chevron, {}),\n          size: \"small\"\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: classNames(styles.selector, {\n          [styles.open]: selectYear\n        }),\n        onClick: toggleYearSelect,\n        children: [year, /*#__PURE__*/_jsx(Icon, {\n          className: styles.icon,\n          icon: selectYear ? /*#__PURE__*/_jsx(Cross, {}) : /*#__PURE__*/_jsx(Chevron, {}),\n          size: \"small\"\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.body,\n      children: [!selectMonth && !selectYear && /*#__PURE__*/_jsx(DaySelector, {\n        date: date,\n        minDate: minDate,\n        maxDate: maxDate,\n        locale: locale,\n        onSelect: handleChange\n      }), selectMonth && /*#__PURE__*/_jsx(MonthSelector, {\n        date: date,\n        minDate: minDate,\n        maxDate: maxDate,\n        locale: locale,\n        onSelect: handleChange,\n        onClose: toggleMonthSelect\n      }), selectYear && /*#__PURE__*/_jsx(YearSelector, {\n        date: date,\n        minDate: minDate,\n        maxDate: maxDate,\n        onSelect: handleChange,\n        onClose: toggleYearSelect\n      })]\n    })]\n  });\n}\n\nconst DaySelector = ({\n  date,\n  minDate,\n  maxDate,\n  locale,\n  onSelect\n}) => {\n  const startWeek = startOfWeek(date, {\n    locale: dateLocales[locale]\n  });\n  const startMonth = startOfMonth(date, {\n    locale: dateLocales[locale]\n  });\n  const startDay = subDays(startMonth, startMonth.getDay());\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  const daysOfWeek = [];\n\n  for (let i = 0; i < 7; i++) {\n    daysOfWeek.push(addDays(startWeek, i));\n  }\n\n  const days = [];\n\n  for (let i = 0; i < 35; i++) {\n    days.push(addDays(startDay, i));\n  }\n\n  return /*#__PURE__*/_jsxs(\"table\", {\n    children: [/*#__PURE__*/_jsx(\"thead\", {\n      children: /*#__PURE__*/_jsx(\"tr\", {\n        children: daysOfWeek.map((day, i) => /*#__PURE__*/_jsx(\"th\", {\n          className: locale,\n          children: dateFormat(day, 'EEE', locale)\n        }, i))\n      })\n    }), /*#__PURE__*/_jsx(\"tbody\", {\n      children: chunk(days, 7).map((week, i) => /*#__PURE__*/_jsx(\"tr\", {\n        children: week.map((day, j) => {\n          const disabled = isBefore(day, minDate) || isAfter(day, maxDate);\n          return /*#__PURE__*/_jsx(\"td\", {\n            className: classNames({\n              [styles.selected]: isSameDay(date, day),\n              [styles.faded]: day.getMonth() !== month || day.getFullYear() !== year,\n              [styles.disabled]: disabled\n            }),\n            onClick: !disabled ? () => onSelect(day) : null,\n            children: day.getDate()\n          }, j);\n        })\n      }, i))\n    })]\n  });\n};\n\nconst MonthSelector = ({\n  date,\n  minDate,\n  maxDate,\n  locale,\n  onSelect\n}) => {\n  const start = startOfYear(date);\n  const months = [];\n\n  for (let i = 0; i < 12; i++) {\n    months.push(addMonths(start, i));\n  }\n\n  function handleSelect(value) {\n    onSelect(setMonth(date, value));\n  }\n\n  return /*#__PURE__*/_jsx(\"table\", {\n    children: /*#__PURE__*/_jsx(\"tbody\", {\n      children: chunk(months, 3).map((row, i) => /*#__PURE__*/_jsx(\"tr\", {\n        children: row.map((month, j) => {\n          const disabled = isBefore(endOfMonth(month), minDate) || isAfter(startOfMonth(month), maxDate);\n          return /*#__PURE__*/_jsx(\"td\", {\n            className: classNames(locale, {\n              [styles.selected]: month.getMonth() === date.getMonth(),\n              [styles.disabled]: disabled\n            }),\n            onClick: !disabled ? () => handleSelect(month.getMonth()) : null,\n            children: dateFormat(month, 'MMMM', locale)\n          }, j);\n        })\n      }, i))\n    })\n  });\n};\n\nconst YearSelector = ({\n  date,\n  minDate,\n  maxDate,\n  onSelect\n}) => {\n  const {\n    0: currentDate,\n    1: setCurrentDate\n  } = useState(date);\n  const year = date.getFullYear();\n  const currentYear = currentDate.getFullYear();\n  const minYear = minDate.getFullYear();\n  const maxYear = maxDate.getFullYear();\n  const years = [];\n\n  for (let i = 0; i < 15; i++) {\n    years.push(currentYear - 7 + i);\n  }\n\n  function handleSelect(value) {\n    onSelect(setYear(date, value));\n  }\n\n  function handlePrevClick() {\n    setCurrentDate(state => subYears(state, 15));\n  }\n\n  function handleNextClick() {\n    setCurrentDate(state => addYears(state, 15));\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.pager,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.left,\n      children: /*#__PURE__*/_jsx(Button, {\n        icon: /*#__PURE__*/_jsx(Chevron, {}),\n        size: \"small\",\n        onClick: handlePrevClick,\n        disabled: years[0] <= minYear,\n        variant: \"light\"\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.middle,\n      children: /*#__PURE__*/_jsx(\"table\", {\n        children: /*#__PURE__*/_jsx(\"tbody\", {\n          children: chunk(years, 5).map((row, i) => /*#__PURE__*/_jsx(\"tr\", {\n            children: row.map((n, j) => /*#__PURE__*/_jsx(\"td\", {\n              className: classNames({\n                [styles.selected]: n === year,\n                [styles.disabled]: n < minYear || n > maxYear\n              }),\n              onClick: () => n < minYear || n > maxYear ? null : handleSelect(n),\n              children: n\n            }, j))\n          }, i))\n        })\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.right,\n      children: /*#__PURE__*/_jsx(Button, {\n        icon: /*#__PURE__*/_jsx(Chevron, {}),\n        size: \"small\",\n        onClick: handleNextClick,\n        disabled: years[years.length - 1] > maxYear,\n        variant: \"light\"\n      })\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}