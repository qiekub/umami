{"ast":null,"code":"import _regeneratorRuntime from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { get } from 'lib/web';\nimport { updateQuery } from 'redux/actions/queries';\nimport { useRouter } from 'next/router';\nexport default function useFetch(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var dispatch = useDispatch();\n\n  var _useState = useState(),\n      response = _useState[0],\n      setResponse = _useState[1];\n\n  var _useState2 = useState(),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoadiing = _useState3[1];\n\n  var _useState4 = useState(0),\n      count = _useState4[0],\n      setCount = _useState4[1];\n\n  var _useRouter = useRouter(),\n      basePath = _useRouter.basePath;\n\n  var _options$params = options.params,\n      params = _options$params === void 0 ? {} : _options$params,\n      disabled = options.disabled,\n      headers = options.headers,\n      _options$delay = options.delay,\n      delay = _options$delay === void 0 ? 0 : _options$delay,\n      interval = options.interval,\n      onDataLoad = options.onDataLoad;\n\n  function loadData(_x) {\n    return _loadData.apply(this, arguments);\n  }\n\n  function _loadData() {\n    _loadData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n      var time, _yield$get, data, status, ok;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setLoadiing(true);\n              setError(null);\n              time = performance.now();\n              _context.next = 6;\n              return get(\"\".concat(basePath).concat(url), params, headers);\n\n            case 6:\n              _yield$get = _context.sent;\n              data = _yield$get.data;\n              status = _yield$get.status;\n              ok = _yield$get.ok;\n              dispatch(updateQuery({\n                url: url,\n                time: performance.now() - time,\n                completed: Date.now()\n              }));\n\n              if (status >= 400) {\n                setError(data);\n                setResponse({\n                  data: null,\n                  status: status,\n                  ok: ok\n                });\n              } else {\n                setResponse({\n                  data: data,\n                  status: status,\n                  ok: ok\n                });\n              }\n\n              onDataLoad === null || onDataLoad === void 0 ? void 0 : onDataLoad(data);\n              _context.next = 19;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n              setError(_context.t0);\n\n            case 19:\n              _context.prev = 19;\n              setLoadiing(false);\n              return _context.finish(19);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15, 19, 22]]);\n    }));\n    return _loadData.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    if (url && !disabled) {\n      var id = setTimeout(function () {\n        return loadData(params);\n      }, delay);\n      return function () {\n        clearTimeout(id);\n      };\n    }\n  }, [url, !!disabled, count].concat(_toConsumableArray(update)));\n  useEffect(function () {\n    if (interval && !disabled) {\n      var id = setInterval(function () {\n        return setCount(function (state) {\n          return state + 1;\n        });\n      }, interval);\n      return function () {\n        clearInterval(id);\n      };\n    }\n  }, [interval, !!disabled]);\n  return _objectSpread(_objectSpread({}, response), {}, {\n    error: error,\n    loading: loading\n  });\n}","map":null,"metadata":{},"sourceType":"module"}