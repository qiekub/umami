{"ast":null,"code":"import { getAccountById, getAccountByUsername, updateAccount, createAccount } from 'lib/queries';\nimport { useAuth } from 'lib/middleware';\nimport { hashPassword } from 'lib/crypto';\nimport { ok, unauthorized, methodNotAllowed, badRequest } from 'lib/response';\nexport default (async (req, res) => {\n  await useAuth(req, res);\n  const {\n    user_id: current_user_id,\n    is_admin: current_user_is_admin\n  } = req.auth;\n\n  if (req.method === 'POST') {\n    const {\n      user_id,\n      username,\n      password,\n      is_admin\n    } = req.body;\n\n    if (user_id) {\n      const account = await getAccountById(user_id);\n\n      if (account.user_id === current_user_id || current_user_is_admin) {\n        const data = {};\n\n        if (password) {\n          data.password = await hashPassword(password);\n        } // Only admin can change these fields\n\n\n        if (current_user_is_admin) {\n          // Cannot change username of admin\n          if (username !== 'admin') {\n            data.username = username;\n          }\n\n          data.is_admin = is_admin;\n        }\n\n        if (data.username && account.username !== data.username) {\n          const accountByUsername = await getAccountByUsername(username);\n\n          if (accountByUsername) {\n            return badRequest(res, 'Account already exists');\n          }\n        }\n\n        const updated = await updateAccount(user_id, data);\n        return ok(res, updated);\n      }\n\n      return unauthorized(res);\n    } else {\n      const accountByUsername = await getAccountByUsername(username);\n\n      if (accountByUsername) {\n        return badRequest(res, 'Account already exists');\n      }\n\n      const created = await createAccount({\n        username,\n        password: await hashPassword(password)\n      });\n      return ok(res, created);\n    }\n  }\n\n  return methodNotAllowed(res);\n});","map":null,"metadata":{},"sourceType":"module"}