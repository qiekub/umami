{"ast":null,"code":"import path from 'path';\nimport requestIp from 'request-ip';\nimport { browserName, detectOS } from 'detect-browser';\nimport isLocalhost from 'is-localhost-ip';\nimport maxmind from 'maxmind';\nimport { DESKTOP_OS, MOBILE_OS, DESKTOP_SCREEN_WIDTH, LAPTOP_SCREEN_WIDTH, MOBILE_SCREEN_WIDTH } from './constants';\nlet lookup;\nexport function getIpAddress(req) {\n  // Cloudflare\n  if (req.headers['cf-connecting-ip']) {\n    return req.headers['cf-connecting-ip'];\n  }\n\n  return requestIp.getClientIp(req);\n}\nexport function getDevice(screen, browser, os) {\n  if (!screen) return;\n  const [width] = screen.split('x');\n\n  if (DESKTOP_OS.includes(os)) {\n    if (os === 'Chrome OS' || width < DESKTOP_SCREEN_WIDTH) {\n      return 'laptop';\n    }\n\n    return 'desktop';\n  } else if (MOBILE_OS.includes(os)) {\n    if (os === 'Amazon OS' || width > MOBILE_SCREEN_WIDTH) {\n      return 'tablet';\n    }\n\n    return 'mobile';\n  }\n\n  if (width >= DESKTOP_SCREEN_WIDTH) {\n    return 'desktop';\n  } else if (width >= LAPTOP_SCREEN_WIDTH) {\n    return 'laptop';\n  } else if (width >= MOBILE_SCREEN_WIDTH) {\n    return 'tablet';\n  } else {\n    return 'mobile';\n  }\n}\nexport async function getCountry(req, ip) {\n  var _result$country;\n\n  // Cloudflare\n  if (req.headers['cf-ipcountry']) {\n    return req.headers['cf-ipcountry'];\n  } // Ignore local ips\n\n\n  if (await isLocalhost(ip)) {\n    return;\n  } // Database lookup\n\n\n  if (!lookup) {\n    lookup = await maxmind.open(path.resolve('./public/geo/GeoLite2-Country.mmdb'));\n  }\n\n  const result = lookup.get(ip);\n  return result === null || result === void 0 ? void 0 : (_result$country = result.country) === null || _result$country === void 0 ? void 0 : _result$country.iso_code;\n}\nexport async function getClientInfo(req, {\n  screen\n}) {\n  const userAgent = req.headers['user-agent'];\n  const ip = getIpAddress(req);\n  const country = await getCountry(req, ip);\n  const browser = browserName(userAgent);\n  const os = detectOS(userAgent);\n  const device = getDevice(screen, browser, os);\n  return {\n    userAgent,\n    browser,\n    os,\n    ip,\n    country,\n    device\n  };\n}","map":null,"metadata":{},"sourceType":"module"}