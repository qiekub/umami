{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { checkVersion } from 'redux/actions/app';\nimport { VERSION_CHECK } from 'lib/constants';\nimport { getItem, setItem } from 'lib/web';\nexport default function useVersion(check) {\n  var _getItem;\n\n  const dispatch = useDispatch();\n  const versions = useSelector(state => state.app.versions);\n  const checked = versions.latest === ((_getItem = getItem(VERSION_CHECK)) === null || _getItem === void 0 ? void 0 : _getItem.version);\n  const updateCheck = useCallback(() => {\n    setItem(VERSION_CHECK, {\n      version: versions.latest,\n      time: Date.now()\n    });\n  }, [versions]);\n  useEffect(() => {\n    if (check && !versions.latest) {\n      dispatch(checkVersion());\n    }\n  }, [versions, check]);\n  return _objectSpread(_objectSpread({}, versions), {}, {\n    checked,\n    updateCheck\n  });\n}","map":null,"metadata":{},"sourceType":"module"}