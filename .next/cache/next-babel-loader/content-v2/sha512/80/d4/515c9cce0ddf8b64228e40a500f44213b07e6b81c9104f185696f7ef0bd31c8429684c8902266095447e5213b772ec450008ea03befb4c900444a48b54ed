{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport { getQueryString } from 'lib/url';\nexport default function usePageQuery() {\n  const router = useRouter();\n  const {\n    pathname,\n    search\n  } = location;\n  const query = useMemo(() => {\n    if (!search) {\n      return {};\n    }\n\n    const params = search.substring(1).split('&');\n    return params.reduce((obj, item) => {\n      const [key, value] = item.split('=');\n      obj[key] = decodeURIComponent(value);\n      return obj;\n    }, {});\n  }, [search]);\n\n  function resolve(params) {\n    const search = getQueryString(_objectSpread(_objectSpread({}, query), params));\n    const {\n      asPath\n    } = router;\n    return `${asPath.split('?')[0]}${search}`;\n  }\n\n  return {\n    pathname,\n    query,\n    resolve,\n    router\n  };\n}","map":null,"metadata":{},"sourceType":"module"}