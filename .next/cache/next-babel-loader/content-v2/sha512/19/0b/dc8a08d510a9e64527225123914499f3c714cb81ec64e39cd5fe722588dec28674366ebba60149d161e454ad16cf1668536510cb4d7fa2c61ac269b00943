{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useMemo, useState, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport firstBy from 'thenby';\nimport { percentFilter } from 'lib/filters';\nimport DataTable from './DataTable';\nimport FilterButtons from 'components/common/FilterButtons';\nconst FILTER_REFERRERS = 0;\nconst FILTER_PAGES = 1;\nexport default function RealtimeViews({\n  websiteId,\n  data,\n  websites\n}) {\n  const {\n    pageviews\n  } = data;\n  const {\n    0: filter,\n    1: setFilter\n  } = useState(FILTER_REFERRERS);\n  const domains = useMemo(() => websites.map(({\n    domain\n  }) => domain), [websites]);\n  const getDomain = useCallback(id => {\n    var _websites$, _websites$find;\n\n    return websites.length === 1 ? (_websites$ = websites[0]) === null || _websites$ === void 0 ? void 0 : _websites$.domain : (_websites$find = websites.find(({\n      website_id\n    }) => website_id === id)) === null || _websites$find === void 0 ? void 0 : _websites$find.domain;\n  }, [websites]);\n  const buttons = [{\n    label: /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"metrics.referrers\",\n      defaultMessage: \"Referrers\"\n    }),\n    value: FILTER_REFERRERS\n  }, {\n    label: /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"metrics.pages\",\n      defaultMessage: \"Pages\"\n    }),\n    value: FILTER_PAGES\n  }];\n\n  const renderLink = ({\n    x\n  }) => {\n    const domain = x.startsWith('/') ? getDomain(websiteId) : '';\n    return /*#__PURE__*/_jsx(\"a\", {\n      href: `//${domain}${x}`,\n      target: \"_blank\",\n      rel: \"noreferrer noopener\",\n      children: x\n    });\n  };\n\n  const {\n    0: referrers,\n    1: pages\n  } = useMemo(() => {\n    if (pageviews) {\n      const referrers = percentFilter(pageviews.reduce((arr, {\n        referrer\n      }) => {\n        if (referrer !== null && referrer !== void 0 && referrer.startsWith('http')) {\n          const hostname = new URL(referrer).hostname.replace(/^www\\./, '');\n\n          if (hostname && !domains.includes(hostname)) {\n            const row = arr.find(({\n              x\n            }) => x === hostname);\n\n            if (!row) {\n              arr.push({\n                x: hostname,\n                y: 1\n              });\n            } else {\n              row.y += 1;\n            }\n          }\n        }\n\n        return arr;\n      }, []).sort(firstBy('y', -1)));\n      const pages = percentFilter(pageviews.reduce((arr, {\n        url,\n        website_id\n      }) => {\n        var _url;\n\n        if ((_url = url) !== null && _url !== void 0 && _url.startsWith('/')) {\n          if (!websiteId && websites.length > 1) {\n            url = `${getDomain(website_id)}${url}`;\n          }\n\n          const row = arr.find(({\n            x\n          }) => x === url);\n\n          if (!row) {\n            arr.push({\n              x: url,\n              y: 1\n            });\n          } else {\n            row.y += 1;\n          }\n        }\n\n        return arr;\n      }, []).sort(firstBy('y', -1)));\n      return [referrers, pages];\n    }\n\n    return [];\n  }, [pageviews]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(FilterButtons, {\n      buttons: buttons,\n      selected: filter,\n      onClick: setFilter\n    }), filter === FILTER_REFERRERS && /*#__PURE__*/_jsx(DataTable, {\n      title: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"metrics.referrers\",\n        defaultMessage: \"Referrers\"\n      }),\n      metric: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"metrics.views\",\n        defaultMessage: \"Views\"\n      }),\n      data: referrers,\n      height: 400\n    }), filter === FILTER_PAGES && /*#__PURE__*/_jsx(DataTable, {\n      title: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"metrics.pages\",\n        defaultMessage: \"Pages\"\n      }),\n      metric: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"metrics.views\",\n        defaultMessage: \"Views\"\n      }),\n      renderLabel: renderLink,\n      data: pages,\n      height: 400\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}