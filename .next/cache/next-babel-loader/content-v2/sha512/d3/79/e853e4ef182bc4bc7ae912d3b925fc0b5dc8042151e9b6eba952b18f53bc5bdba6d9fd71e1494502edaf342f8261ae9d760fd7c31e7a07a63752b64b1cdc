{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport MetricsTable from './MetricsTable';\nimport Tag from 'components/common/Tag';\nimport DropDown from 'components/common/DropDown';\nimport { eventTypeFilter } from 'lib/filters';\nimport styles from './EventsTable.module.css';\nconst EVENT_FILTER_DEFAULT = {\n  value: 'EVENT_FILTER_DEFAULT',\n  label: /*#__PURE__*/_jsx(FormattedMessage, {\n    id: \"label.all-events\",\n    defaultMessage: \"All events\"\n  })\n};\nexport default function EventsTable(_ref) {\n  let {\n    websiteId\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"websiteId\"]);\n\n  const {\n    0: eventType,\n    1: setEventType\n  } = useState(EVENT_FILTER_DEFAULT.value);\n  const {\n    0: eventTypes,\n    1: setEventTypes\n  } = useState([]);\n  const dropDownOptions = [EVENT_FILTER_DEFAULT, ...eventTypes.map(t => ({\n    value: t,\n    label: t\n  }))];\n\n  function handleDataLoad(data) {\n    var _props$onDataLoad;\n\n    setEventTypes([...new Set(data.map(({\n      x\n    }) => x.split('\\t')[0]))]);\n    (_props$onDataLoad = props.onDataLoad) === null || _props$onDataLoad === void 0 ? void 0 : _props$onDataLoad.call(props, data);\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [(eventTypes === null || eventTypes === void 0 ? void 0 : eventTypes.length) > 1 && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.filter,\n      children: /*#__PURE__*/_jsx(DropDown, {\n        value: eventType,\n        options: dropDownOptions,\n        onChange: setEventType\n      })\n    }), /*#__PURE__*/_jsx(MetricsTable, _objectSpread(_objectSpread({}, props), {}, {\n      title: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"metrics.events\",\n        defaultMessage: \"Events\"\n      }),\n      type: \"event\",\n      metric: /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"metrics.actions\",\n        defaultMessage: \"Actions\"\n      }),\n      websiteId: websiteId,\n      dataFilter: eventTypeFilter,\n      filterOptions: eventType === EVENT_FILTER_DEFAULT.value ? [] : [eventType],\n      renderLabel: ({\n        x\n      }) => /*#__PURE__*/_jsx(Label, {\n        value: x\n      }),\n      onDataLoad: handleDataLoad\n    }))]\n  });\n}\n\nconst Label = ({\n  value\n}) => {\n  const [event, label] = value.split('\\t');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Tag, {\n      children: event\n    }), label]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}