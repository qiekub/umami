{"ast":null,"code":"import isbot from 'isbot';\nimport ipaddr from 'ipaddr.js';\nimport { savePageView, saveEvent } from 'lib/queries';\nimport { useCors, useSession } from 'lib/middleware';\nimport { getIpAddress } from 'lib/request';\nimport { ok, badRequest } from 'lib/response';\nimport { createToken } from 'lib/crypto';\nexport default (async (req, res) => {\n  await useCors(req, res);\n\n  if (isbot(req.headers['user-agent'])) {\n    return ok(res);\n  }\n\n  if (process.env.IGNORE_IP) {\n    const ips = process.env.IGNORE_IP.split(',').map(n => n.trim());\n    const ip = getIpAddress(req);\n    const blocked = ips.find(i => {\n      if (i === ip) return true; // CIDR notation\n\n      if (i.indexOf('/') > 0) {\n        const addr = ipaddr.parse(ip);\n        const range = ipaddr.parseCIDR(i);\n        if (addr.match(range)) return true;\n      }\n\n      return false;\n    });\n\n    if (blocked) {\n      return ok(res);\n    }\n  }\n\n  await useSession(req, res);\n  const {\n    type,\n    payload\n  } = req.body;\n  const {\n    session: {\n      website_id,\n      session_id\n    }\n  } = req;\n\n  if (type === 'pageview') {\n    const {\n      url,\n      referrer\n    } = payload;\n    await savePageView(website_id, session_id, url, referrer);\n  } else if (type === 'event') {\n    const {\n      url,\n      event_type,\n      event_value\n    } = payload;\n    await saveEvent(website_id, session_id, url, event_type, event_value);\n  } else {\n    return badRequest(res);\n  }\n\n  const token = await createToken({\n    website_id,\n    session_id\n  });\n  return ok(res, token);\n});","map":null,"metadata":{},"sourceType":"module"}