{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Formik, Form, Field } from 'formik';\nimport Button from 'components/common/Button';\nimport FormLayout, { FormButtons, FormError, FormMessage, FormRow } from 'components/layout/FormLayout';\nimport useDelete from 'hooks/useDelete';\nconst CONFIRMATION_WORD = 'DELETE';\n\nconst validate = ({\n  confirmation\n}) => {\n  const errors = {};\n\n  if (confirmation !== CONFIRMATION_WORD) {\n    errors.confirmation = !confirmation ? /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"label.required\",\n      defaultMessage: \"Required\"\n    }) : /*#__PURE__*/_jsx(FormattedMessage, {\n      id: \"label.invalid\",\n      defaultMessage: \"Invalid\"\n    });\n  }\n\n  return errors;\n};\n\nexport default function DeleteForm({\n  values,\n  onSave,\n  onClose\n}) {\n  const del = useDelete();\n  const {\n    0: message,\n    1: setMessage\n  } = useState();\n\n  const handleSubmit = async ({\n    type,\n    id\n  }) => {\n    const {\n      ok,\n      data\n    } = await del(`/api/${type}/${id}`);\n\n    if (ok) {\n      onSave();\n    } else {\n      setMessage(data || /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"message.failure\",\n        defaultMessage: \"Something went wrong.\"\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsx(FormLayout, {\n    children: /*#__PURE__*/_jsx(Formik, {\n      initialValues: _objectSpread({\n        confirmation: ''\n      }, values),\n      validate: validate,\n      onSubmit: handleSubmit,\n      children: props => /*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(FormattedMessage, {\n            id: \"message.confirm-delete\",\n            defaultMessage: \"Are your sure you want to delete {target}?\",\n            values: {\n              target: /*#__PURE__*/_jsx(\"b\", {\n                children: values.name\n              })\n            }\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(FormattedMessage, {\n            id: \"message.delete-warning\",\n            defaultMessage: \"All associated data will be deleted as well.\"\n          })\n        }), /*#__PURE__*/_jsx(\"p\", {\n          children: /*#__PURE__*/_jsx(FormattedMessage, {\n            id: \"message.type-delete\",\n            defaultMessage: \"Type {delete} in the box below to confirm.\",\n            values: {\n              delete: /*#__PURE__*/_jsx(\"b\", {\n                children: CONFIRMATION_WORD\n              })\n            }\n          })\n        }), /*#__PURE__*/_jsx(FormRow, {\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(Field, {\n              name: \"confirmation\",\n              type: \"text\"\n            }), /*#__PURE__*/_jsx(FormError, {\n              name: \"confirmation\"\n            })]\n          })\n        }), /*#__PURE__*/_jsxs(FormButtons, {\n          children: [/*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            variant: \"danger\",\n            disabled: props.values.confirmation !== CONFIRMATION_WORD,\n            children: /*#__PURE__*/_jsx(FormattedMessage, {\n              id: \"label.delete\",\n              defaultMessage: \"Delete\"\n            })\n          }), /*#__PURE__*/_jsx(Button, {\n            onClick: onClose,\n            children: /*#__PURE__*/_jsx(FormattedMessage, {\n              id: \"label.cancel\",\n              defaultMessage: \"Cancel\"\n            })\n          })]\n        }), /*#__PURE__*/_jsx(FormMessage, {\n          children: message\n        })]\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}