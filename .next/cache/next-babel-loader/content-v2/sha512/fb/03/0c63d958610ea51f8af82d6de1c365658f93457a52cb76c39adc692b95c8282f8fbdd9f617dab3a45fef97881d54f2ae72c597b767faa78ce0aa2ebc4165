{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment-timezone';\nimport { addMinutes, addHours, addDays, addMonths, addYears, subHours, subDays, startOfMinute, startOfHour, startOfDay, startOfWeek, startOfMonth, startOfYear, endOfHour, endOfDay, endOfWeek, endOfMonth, endOfYear, differenceInMinutes, differenceInHours, differenceInCalendarDays, differenceInCalendarMonths, differenceInCalendarYears, format } from 'date-fns';\nimport { enUS } from 'date-fns/locale';\nimport { dateLocales } from 'lib/lang';\nexport function getTimezone() {\n  return moment.tz.guess();\n}\nexport function getLocalTime(t) {\n  return addMinutes(new Date(t), new Date().getTimezoneOffset());\n}\nexport function getDateRange(value, locale = 'en-US') {\n  const now = new Date();\n  const localeOptions = dateLocales[locale];\n  const {\n    num,\n    unit\n  } = value.match(/^(?<num>[0-9]+)(?<unit>hour|day|week|month|year)$/).groups;\n\n  if (+num === 1) {\n    switch (unit) {\n      case 'day':\n        return {\n          startDate: startOfDay(now),\n          endDate: endOfDay(now),\n          unit: 'hour',\n          value\n        };\n\n      case 'week':\n        return {\n          startDate: startOfWeek(now, {\n            locale: localeOptions\n          }),\n          endDate: endOfWeek(now, {\n            locale: localeOptions\n          }),\n          unit: 'day',\n          value\n        };\n\n      case 'month':\n        return {\n          startDate: startOfMonth(now),\n          endDate: endOfMonth(now),\n          unit: 'day',\n          value\n        };\n\n      case 'year':\n        return {\n          startDate: startOfYear(now),\n          endDate: endOfYear(now),\n          unit: 'month',\n          value\n        };\n    }\n  }\n\n  switch (unit) {\n    case 'day':\n      return {\n        startDate: subDays(startOfDay(now), num - 1),\n        endDate: endOfDay(now),\n        unit,\n        value\n      };\n\n    case 'hour':\n      return {\n        startDate: subHours(startOfHour(now), num - 1),\n        endDate: endOfHour(now),\n        unit,\n        value\n      };\n  }\n}\nexport function getDateRangeValues(startDate, endDate) {\n  let unit = 'year';\n\n  if (differenceInHours(endDate, startDate) <= 48) {\n    unit = 'hour';\n  } else if (differenceInCalendarDays(endDate, startDate) <= 90) {\n    unit = 'day';\n  } else if (differenceInCalendarMonths(endDate, startDate) <= 24) {\n    unit = 'month';\n  }\n\n  return {\n    startDate: startOfDay(startDate),\n    endDate: endOfDay(endDate),\n    unit\n  };\n}\nexport function getDateFromString(str) {\n  const [ymd, hms] = str.split(' ');\n  const [year, month, day] = ymd.split('-');\n\n  if (hms) {\n    const [hour, min, sec] = hms.split(':');\n    return new Date(year, month - 1, day, hour, min, sec);\n  }\n\n  return new Date(year, month - 1, day);\n}\nconst dateFuncs = {\n  minute: [differenceInMinutes, addMinutes, startOfMinute],\n  hour: [differenceInHours, addHours, startOfHour],\n  day: [differenceInCalendarDays, addDays, startOfDay],\n  month: [differenceInCalendarMonths, addMonths, startOfMonth],\n  year: [differenceInCalendarYears, addYears, startOfYear]\n};\nexport function getDateArray(data, startDate, endDate, unit) {\n  const arr = [];\n  const [diff, add, normalize] = dateFuncs[unit];\n  const n = diff(endDate, startDate) + 1;\n\n  function findData(t) {\n    const x = data.find(e => {\n      return normalize(getDateFromString(e.t)).getTime() === t.getTime();\n    });\n    return (x === null || x === void 0 ? void 0 : x.y) || 0;\n  }\n\n  for (let i = 0; i < n; i++) {\n    const t = normalize(add(startDate, i));\n    const y = findData(t);\n    arr.push(_objectSpread(_objectSpread({}, data[i]), {}, {\n      t,\n      y\n    }));\n  }\n\n  return arr;\n}\nexport function getDateLength(startDate, endDate, unit) {\n  const [diff] = dateFuncs[unit];\n  return diff(endDate, startDate) + 1;\n}\nexport const customFormats = {\n  'en-US': {\n    p: 'ha',\n    pp: 'h:mm:ss'\n  }\n};\nexport function dateFormat(date, str, locale = 'en-US') {\n  var _customFormats$locale;\n\n  return format(date, (customFormats === null || customFormats === void 0 ? void 0 : (_customFormats$locale = customFormats[locale]) === null || _customFormats$locale === void 0 ? void 0 : _customFormats$locale[str]) || str, {\n    locale: dateLocales[locale] || enUS\n  });\n}","map":null,"metadata":{},"sourceType":"module"}