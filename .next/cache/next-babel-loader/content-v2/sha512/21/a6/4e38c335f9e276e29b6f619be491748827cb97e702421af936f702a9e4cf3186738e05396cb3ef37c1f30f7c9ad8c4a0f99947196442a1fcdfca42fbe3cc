{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport Loading from 'components/common/Loading';\nimport ErrorMessage from 'components/common/ErrorMessage';\nimport useFetch from 'hooks/useFetch';\nimport useDateRange from 'hooks/useDateRange';\nimport usePageQuery from 'hooks/usePageQuery';\nimport useShareToken from 'hooks/useShareToken';\nimport { formatShortTime, formatNumber, formatLongNumber } from 'lib/format';\nimport { TOKEN_HEADER } from 'lib/constants';\nimport MetricCard from './MetricCard';\nimport styles from './MetricsBar.module.css';\nexport default function MetricsBar({\n  websiteId,\n  className\n}) {\n  const shareToken = useShareToken();\n  const [dateRange] = useDateRange(websiteId);\n  const {\n    startDate,\n    endDate,\n    modified\n  } = dateRange;\n  const {\n    0: format,\n    1: setFormat\n  } = useState(true);\n  const {\n    query: {\n      url\n    }\n  } = usePageQuery();\n  const {\n    data,\n    error,\n    loading\n  } = useFetch(`/api/website/${websiteId}/stats`, {\n    params: {\n      start_at: +startDate,\n      end_at: +endDate,\n      url\n    },\n    headers: {\n      [TOKEN_HEADER]: shareToken === null || shareToken === void 0 ? void 0 : shareToken.token\n    }\n  }, [url, modified]);\n  const formatFunc = format ? formatLongNumber : formatNumber;\n\n  function handleSetFormat() {\n    setFormat(state => !state);\n  }\n\n  const {\n    pageviews,\n    uniques,\n    bounces,\n    totaltime\n  } = data || {};\n  const num = Math.min(uniques, bounces);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classNames(styles.bar, className),\n    onClick: handleSetFormat,\n    children: [!data && loading && /*#__PURE__*/_jsx(Loading, {}), error && /*#__PURE__*/_jsx(ErrorMessage, {}), data && !error && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(MetricCard, {\n        label: /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"metrics.views\",\n          defaultMessage: \"Views\"\n        }),\n        value: pageviews,\n        format: formatFunc\n      }), /*#__PURE__*/_jsx(MetricCard, {\n        label: /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"metrics.visitors\",\n          defaultMessage: \"Visitors\"\n        }),\n        value: uniques,\n        format: formatFunc\n      }), /*#__PURE__*/_jsx(MetricCard, {\n        label: /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"metrics.bounce-rate\",\n          defaultMessage: \"Bounce rate\"\n        }),\n        value: uniques ? num / uniques * 100 : 0,\n        format: n => Number(n).toFixed(0) + '%'\n      }), /*#__PURE__*/_jsx(MetricCard, {\n        label: /*#__PURE__*/_jsx(FormattedMessage, {\n          id: \"metrics.average-visit-time\",\n          defaultMessage: \"Average visit time\"\n        }),\n        value: totaltime && pageviews ? totaltime / (pageviews - bounces) : 0,\n        format: n => formatShortTime(n, ['m', 's'], ' ')\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}