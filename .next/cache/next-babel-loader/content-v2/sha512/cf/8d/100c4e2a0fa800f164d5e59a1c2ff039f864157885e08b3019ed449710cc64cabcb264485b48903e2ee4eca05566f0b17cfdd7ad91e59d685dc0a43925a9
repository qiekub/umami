{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { parseISO } from 'date-fns';\nimport { getDateRange } from 'lib/date';\nimport { getItem, setItem } from 'lib/web';\nimport { setDateRange } from '../redux/actions/websites';\nimport { DATE_RANGE_CONFIG, DEFAULT_DATE_RANGE } from 'lib/constants';\nimport useForceUpdate from './useForceUpdate';\nimport useLocale from './useLocale';\nexport default function useDateRange(websiteId, defaultDateRange = DEFAULT_DATE_RANGE) {\n  const dispatch = useDispatch();\n  const [locale] = useLocale();\n  const dateRange = useSelector(state => {\n    var _state$websites$websi;\n\n    return (_state$websites$websi = state.websites[websiteId]) === null || _state$websites$websi === void 0 ? void 0 : _state$websites$websi.dateRange;\n  });\n  const forceUpdate = useForceUpdate();\n  const globalDefault = getItem(DATE_RANGE_CONFIG);\n  let globalDateRange;\n\n  if (globalDefault) {\n    if (typeof globalDefault === 'string') {\n      globalDateRange = getDateRange(globalDefault, locale);\n    } else if (typeof globalDefault === 'object') {\n      globalDateRange = _objectSpread(_objectSpread({}, globalDefault), {}, {\n        startDate: parseISO(globalDefault.startDate),\n        endDate: parseISO(globalDefault.endDate)\n      });\n    }\n  }\n\n  function saveDateRange(values) {\n    const {\n      value\n    } = values;\n\n    if (websiteId) {\n      dispatch(setDateRange(websiteId, values));\n    } else {\n      setItem(DATE_RANGE_CONFIG, value === 'custom' ? values : value);\n      forceUpdate();\n    }\n  }\n\n  return [dateRange || globalDateRange || getDateRange(defaultDateRange, locale), saveDateRange];\n}","map":null,"metadata":{},"sourceType":"module"}