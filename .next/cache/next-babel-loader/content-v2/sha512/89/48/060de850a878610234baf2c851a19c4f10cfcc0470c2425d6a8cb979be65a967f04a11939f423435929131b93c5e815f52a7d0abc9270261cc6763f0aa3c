{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useMemo } from 'react';\nimport tinycolor from 'tinycolor2';\nimport BarChart from './BarChart';\nimport { getDateArray, getDateLength } from 'lib/date';\nimport useFetch from 'hooks/useFetch';\nimport useDateRange from 'hooks/useDateRange';\nimport useTimezone from 'hooks/useTimezone';\nimport usePageQuery from 'hooks/usePageQuery';\nimport useShareToken from 'hooks/useShareToken';\nimport { EVENT_COLORS, TOKEN_HEADER } from 'lib/constants';\nexport default function EventsChart(_ref) {\n  var websiteId = _ref.websiteId,\n      className = _ref.className,\n      token = _ref.token;\n\n  var _useDateRange = useDateRange(websiteId),\n      _useDateRange2 = _slicedToArray(_useDateRange, 1),\n      dateRange = _useDateRange2[0];\n\n  var startDate = dateRange.startDate,\n      endDate = dateRange.endDate,\n      unit = dateRange.unit,\n      modified = dateRange.modified;\n\n  var _useTimezone = useTimezone(),\n      _useTimezone2 = _slicedToArray(_useTimezone, 1),\n      timezone = _useTimezone2[0];\n\n  var _usePageQuery = usePageQuery(),\n      query = _usePageQuery.query;\n\n  var shareToken = useShareToken();\n\n  var _useFetch = useFetch(\"/api/website/\".concat(websiteId, \"/events\"), {\n    params: {\n      start_at: +startDate,\n      end_at: +endDate,\n      unit: unit,\n      tz: timezone,\n      url: query.url,\n      token: token\n    },\n    headers: _defineProperty({}, TOKEN_HEADER, shareToken === null || shareToken === void 0 ? void 0 : shareToken.token)\n  }, [modified]),\n      data = _useFetch.data,\n      loading = _useFetch.loading;\n\n  var datasets = useMemo(function () {\n    if (!data) return [];\n    if (loading) return data;\n    var map = data.reduce(function (obj, _ref2) {\n      var x = _ref2.x,\n          t = _ref2.t,\n          y = _ref2.y;\n\n      if (!obj[x]) {\n        obj[x] = [];\n      }\n\n      obj[x].push({\n        t: t,\n        y: y\n      });\n      return obj;\n    }, {});\n    Object.keys(map).forEach(function (key) {\n      map[key] = getDateArray(map[key], startDate, endDate, unit);\n    });\n    return Object.keys(map).map(function (key, index) {\n      var color = tinycolor(EVENT_COLORS[index % EVENT_COLORS.length]);\n      return {\n        label: key,\n        data: map[key],\n        lineTension: 0,\n        backgroundColor: color.setAlpha(0.6).toRgbString(),\n        borderColor: color.setAlpha(0.7).toRgbString(),\n        borderWidth: 1\n      };\n    });\n  }, [data, loading]);\n\n  function handleUpdate(chart) {\n    chart.data.datasets = datasets;\n    chart.update();\n  }\n\n  if (!data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(BarChart, {\n    chartId: \"events-\".concat(websiteId),\n    className: className,\n    datasets: datasets,\n    unit: unit,\n    height: 300,\n    records: getDateLength(startDate, endDate, unit),\n    onUpdate: handleUpdate,\n    loading: loading,\n    stacked: true\n  });\n}","map":null,"metadata":{},"sourceType":"module"}