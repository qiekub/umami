{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport tinycolor from 'tinycolor2';\nimport CheckVisible from 'components/helpers/CheckVisible';\nimport BarChart from './BarChart';\nimport useTheme from 'hooks/useTheme';\nimport { THEME_COLORS, DEFAULT_ANIMATION_DURATION } from 'lib/constants';\nexport default function PageviewsChart(_ref) {\n  let {\n    websiteId,\n    data,\n    unit,\n    records,\n    className,\n    loading,\n    animationDuration = DEFAULT_ANIMATION_DURATION\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"websiteId\", \"data\", \"unit\", \"records\", \"className\", \"loading\", \"animationDuration\"]);\n\n  const intl = useIntl();\n  const [theme] = useTheme();\n  const primaryColor = tinycolor(THEME_COLORS[theme].primary);\n  const colors = {\n    views: {\n      background: primaryColor.setAlpha(0.4).toRgbString(),\n      border: primaryColor.setAlpha(0.5).toRgbString()\n    },\n    visitors: {\n      background: primaryColor.setAlpha(0.6).toRgbString(),\n      border: primaryColor.setAlpha(0.7).toRgbString()\n    }\n  };\n\n  const handleUpdate = chart => {\n    const {\n      data: {\n        datasets\n      }\n    } = chart;\n    datasets[0].data = data.sessions;\n    datasets[0].label = intl.formatMessage({\n      id: 'metrics.unique-visitors',\n      defaultMessage: 'Unique visitors'\n    });\n    datasets[1].data = data.pageviews;\n    datasets[1].label = intl.formatMessage({\n      id: 'metrics.page-views',\n      defaultMessage: 'Page views'\n    });\n  };\n\n  if (!data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(CheckVisible, {\n    children: visible => /*#__PURE__*/_jsx(BarChart, _objectSpread(_objectSpread({}, props), {}, {\n      className: className,\n      chartId: websiteId,\n      datasets: [{\n        label: intl.formatMessage({\n          id: 'metrics.unique-visitors',\n          defaultMessage: 'Unique visitors'\n        }),\n        data: data.sessions,\n        lineTension: 0,\n        backgroundColor: colors.visitors.background,\n        borderColor: colors.visitors.border,\n        borderWidth: 1\n      }, {\n        label: intl.formatMessage({\n          id: 'metrics.page-views',\n          defaultMessage: 'Page views'\n        }),\n        data: data.pageviews,\n        lineTension: 0,\n        backgroundColor: colors.views.background,\n        borderColor: colors.views.border,\n        borderWidth: 1\n      }],\n      unit: unit,\n      records: records,\n      animationDuration: visible ? animationDuration : 0,\n      onUpdate: handleUpdate,\n      loading: loading\n    }))\n  });\n}","map":null,"metadata":{},"sourceType":"module"}