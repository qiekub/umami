{"ast":null,"code":"import _regeneratorRuntime from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { getItem } from 'lib/web';\nimport { DEFAULT_LOCALE, DEFAULT_THEME, LOCALE_CONFIG, THEME_CONFIG, VERSION_CHECK } from 'lib/constants';\nimport semver from 'semver';\nvar app = createSlice({\n  name: 'app',\n  initialState: {\n    locale: getItem(LOCALE_CONFIG) || DEFAULT_LOCALE,\n    theme: getItem(THEME_CONFIG) || DEFAULT_THEME,\n    versions: {\n      current: process.env.VERSION,\n      latest: null,\n      hasUpdate: false\n    },\n    shareToken: null\n  },\n  reducers: {\n    setLocale: function setLocale(state, action) {\n      state.locale = action.payload;\n      return state;\n    },\n    setTheme: function setTheme(state, action) {\n      state.theme = action.payload;\n      return state;\n    },\n    setVersions: function setVersions(state, action) {\n      state.versions = action.payload;\n      return state;\n    },\n    setShareToken: function setShareToken(state, action) {\n      state.shareToken = action.payload;\n      return state;\n    }\n  }\n});\nvar _app$actions = app.actions,\n    setLocale = _app$actions.setLocale,\n    setTheme = _app$actions.setTheme,\n    setVersions = _app$actions.setVersions,\n    setShareToken = _app$actions.setShareToken;\nexport { setLocale, setTheme, setVersions, setShareToken };\nexport default app.reducer;\nexport function checkVersion() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var _getState, current, data, tag_name, latest, lastCheck, hasUpdate;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _getState = getState(), current = _getState.app.versions.current;\n              _context.next = 3;\n              return fetch('https://api.github.com/repos/mikecao/umami/releases/latest', {\n                method: 'get',\n                headers: {\n                  Accept: 'application/vnd.github.v3+json'\n                }\n              }).then(function (res) {\n                if (res.ok) {\n                  return res.json();\n                }\n\n                return null;\n              });\n\n            case 3:\n              data = _context.sent;\n\n              if (data) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 6:\n              tag_name = data.tag_name;\n              latest = tag_name.startsWith('v') ? tag_name.slice(1) : tag_name;\n              lastCheck = getItem(VERSION_CHECK);\n              hasUpdate = latest && semver.gt(latest, current) && (lastCheck === null || lastCheck === void 0 ? void 0 : lastCheck.version) !== latest;\n              return _context.abrupt(\"return\", dispatch(setVersions({\n                current: current,\n                latest: latest,\n                hasUpdate: hasUpdate\n              })));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":null,"metadata":{},"sourceType":"module"}