{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport { useSpring, animated, config } from 'react-spring';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport NoData from 'components/common/NoData';\nimport { formatNumber, formatLongNumber } from 'lib/format';\nimport styles from './DataTable.module.css';\nexport default function DataTable({\n  data,\n  title,\n  metric,\n  className,\n  renderLabel,\n  height,\n  animate = true,\n  virtualize = false\n}) {\n  const {\n    0: format,\n    1: setFormat\n  } = useState(true);\n  const formatFunc = format ? formatLongNumber : formatNumber;\n\n  const handleSetFormat = () => setFormat(state => !state);\n\n  const getRow = row => {\n    const {\n      x: label,\n      y: value,\n      z: percent\n    } = row;\n    return /*#__PURE__*/_jsx(AnimatedRow, {\n      label: renderLabel ? renderLabel(row) : label !== null && label !== void 0 ? label : /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"label.unknown\",\n        defaultMessage: \"Unknown\"\n      }),\n      value: value,\n      percent: percent,\n      animate: animate && !virtualize,\n      format: formatFunc,\n      onClick: handleSetFormat\n    }, label);\n  };\n\n  const Row = ({\n    index,\n    style\n  }) => {\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: style,\n      children: getRow(data[index])\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classNames(styles.table, className),\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: styles.title,\n        children: title\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.metric,\n        onClick: handleSetFormat,\n        children: metric\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.body,\n      style: {\n        height\n      },\n      children: [(data === null || data === void 0 ? void 0 : data.length) === 0 && /*#__PURE__*/_jsx(NoData, {}), virtualize && data.length > 0 ? /*#__PURE__*/_jsx(FixedSizeList, {\n        height: height,\n        itemCount: data.length,\n        itemSize: 30,\n        children: Row\n      }) : data.map(row => getRow(row))]\n    })]\n  });\n}\n\nconst AnimatedRow = ({\n  label,\n  value = 0,\n  percent,\n  animate,\n  format,\n  onClick\n}) => {\n  var _props$y;\n\n  const props = useSpring({\n    width: percent,\n    y: value,\n    from: {\n      width: 0,\n      y: 0\n    },\n    config: animate ? config.default : {\n      duration: 0\n    }\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.row,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.label,\n      children: label\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.value,\n      onClick: onClick,\n      children: /*#__PURE__*/_jsx(animated.div, {\n        className: styles.value,\n        children: (_props$y = props.y) === null || _props$y === void 0 ? void 0 : _props$y.interpolate(format)\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.percent,\n      children: [/*#__PURE__*/_jsx(animated.div, {\n        className: styles.bar,\n        style: {\n          width: props.width.interpolate(n => `${n}%`)\n        }\n      }), /*#__PURE__*/_jsx(animated.span, {\n        className: styles.percentValue,\n        children: props.width.interpolate(n => `${n.toFixed(0)}%`)\n      })]\n    })]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}