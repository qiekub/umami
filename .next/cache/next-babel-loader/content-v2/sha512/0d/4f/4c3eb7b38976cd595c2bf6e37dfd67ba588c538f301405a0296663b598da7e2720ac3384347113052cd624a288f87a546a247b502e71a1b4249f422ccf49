{"ast":null,"code":"import { getWebsiteByUuid, getSessionByUuid, createSession } from 'lib/queries';\nimport { getClientInfo } from 'lib/request';\nimport { uuid, isValidUuid, parseToken } from 'lib/crypto';\nexport async function getSession(req) {\n  const {\n    payload\n  } = req.body;\n\n  if (!payload) {\n    throw new Error('Invalid request');\n  }\n\n  const {\n    website: website_uuid,\n    hostname,\n    screen,\n    language,\n    cache\n  } = payload;\n\n  if (cache) {\n    const result = await parseToken(cache);\n\n    if (result) {\n      return result;\n    }\n  }\n\n  if (!isValidUuid(website_uuid)) {\n    throw new Error(`Invalid website: ${website_uuid}`);\n  }\n\n  const {\n    userAgent,\n    browser,\n    os,\n    ip,\n    country,\n    device\n  } = await getClientInfo(req, payload);\n  const website = await getWebsiteByUuid(website_uuid);\n\n  if (!website) {\n    throw new Error(`Website not found: ${website_uuid}`);\n  }\n\n  const {\n    website_id\n  } = website;\n  const session_uuid = uuid(website_id, hostname, ip, userAgent, os);\n  let session = await getSessionByUuid(session_uuid);\n\n  if (!session) {\n    session = await createSession(website_id, {\n      session_uuid,\n      hostname,\n      browser,\n      os,\n      screen,\n      language,\n      country,\n      device\n    });\n  }\n\n  const {\n    session_id\n  } = session;\n  return {\n    website_id,\n    session_id\n  };\n}","map":null,"metadata":{},"sourceType":"module"}