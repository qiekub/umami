{"ast":null,"code":"export function parseTime(val) {\n  const days = ~~(val / 86400);\n  const hours = ~~(val / 3600) - days * 24;\n  const minutes = ~~(val / 60) - days * 1440 - hours * 60;\n  const seconds = ~~val - days * 86400 - hours * 3600 - minutes * 60;\n  const ms = (val - ~~val) * 1000;\n  return {\n    days,\n    hours,\n    minutes,\n    seconds,\n    ms\n  };\n}\nexport function formatTime(val) {\n  const {\n    hour,\n    minutes,\n    seconds\n  } = parseTime(val);\n  const h = hour > 0 ? `${hour}:` : '';\n  const m = hour > 0 ? minutes.toString().padStart(2, '0') : minutes;\n  const s = seconds.toString().padStart(2, '0');\n  return `${h}${m}:${s}`;\n}\nexport function formatShortTime(val, formats = ['m', 's'], space = '') {\n  const {\n    days,\n    hours,\n    minutes,\n    seconds,\n    ms\n  } = parseTime(val);\n  let t = '';\n  if (days > 0 && formats.indexOf('d') !== -1) t += `${days}d${space}`;\n  if (hours > 0 && formats.indexOf('h') !== -1) t += `${hours}h${space}`;\n  if (minutes > 0 && formats.indexOf('m') !== -1) t += `${minutes}m${space}`;\n  if (seconds > 0 && formats.indexOf('s') !== -1) t += `${seconds}s${space}`;\n  if (ms > 0 && formats.indexOf('ms') !== -1) t += `${ms}ms`;\n\n  if (!t) {\n    return `0${formats[formats.length - 1]}`;\n  }\n\n  return t;\n}\nexport function formatNumber(n) {\n  return Number(n).toFixed(0);\n}\nexport function formatLongNumber(value) {\n  const n = Number(value);\n\n  if (n >= 1000000) {\n    return `${(n / 1000000).toFixed(1)}m`;\n  }\n\n  if (n >= 100000) {\n    return `${(n / 1000).toFixed(0)}k`;\n  }\n\n  if (n >= 10000) {\n    return `${(n / 1000).toFixed(1)}k`;\n  }\n\n  if (n >= 1000) {\n    return `${(n / 1000).toFixed(2)}k`;\n  }\n\n  return formatNumber(n);\n}\nexport function stringToColor(str) {\n  if (!str) {\n    return '#ffffff';\n  }\n\n  let hash = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (let i = 0; i < 3; i++) {\n    let value = hash >> i * 8 & 0xff;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}","map":null,"metadata":{},"sourceType":"module"}