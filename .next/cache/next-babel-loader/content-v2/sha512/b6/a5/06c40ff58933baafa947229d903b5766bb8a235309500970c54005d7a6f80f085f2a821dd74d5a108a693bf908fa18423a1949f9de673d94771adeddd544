{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { BROWSERS } from './constants';\nimport { removeTrailingSlash, removeWWW, getDomainName } from './url';\nexport const urlFilter = (data, {\n  raw\n}) => {\n  const isValidUrl = url => {\n    return url !== '' && !url.startsWith('#');\n  };\n\n  if (raw) {\n    return data.filter(({\n      x\n    }) => isValidUrl(x));\n  }\n\n  const cleanUrl = url => {\n    try {\n      const {\n        pathname,\n        search\n      } = new URL(url, location.origin);\n\n      if (search.startsWith('?/')) {\n        return `${pathname}${search}`;\n      }\n\n      return pathname;\n    } catch {\n      return null;\n    }\n  };\n\n  const map = data.reduce((obj, {\n    x,\n    y\n  }) => {\n    if (!isValidUrl(x)) {\n      return obj;\n    }\n\n    const url = cleanUrl(x);\n\n    if (url) {\n      if (!obj[url]) {\n        obj[url] = y;\n      } else {\n        obj[url] += y;\n      }\n    }\n\n    return obj;\n  }, {});\n  return Object.keys(map).map(key => ({\n    x: key,\n    y: map[key]\n  }));\n};\nexport const refFilter = (data, {\n  domain,\n  domainOnly,\n  raw\n}) => {\n  const domainName = getDomainName(domain);\n  const regex = new RegExp(`http[s]?://${domainName}`);\n  const links = {};\n\n  const isValidRef = ref => {\n    return ref !== '' && !ref.startsWith('/') && !ref.startsWith('#');\n  };\n\n  if (raw) {\n    return data.filter(({\n      x\n    }) => isValidRef(x) && !regex.test(x));\n  }\n\n  const cleanUrl = url => {\n    try {\n      const {\n        hostname,\n        origin,\n        pathname,\n        searchParams,\n        protocol\n      } = new URL(url);\n\n      if (hostname === domainName) {\n        return null;\n      }\n\n      if (domainOnly && hostname) {\n        return removeWWW(hostname);\n      }\n\n      if (!origin || origin === 'null') {\n        return `${protocol}${removeTrailingSlash(pathname)}`;\n      }\n\n      if (protocol.startsWith('http')) {\n        const path = removeTrailingSlash(pathname);\n        const ref = searchParams.get('ref');\n        const query = ref ? `?ref=${ref}` : '';\n        return removeTrailingSlash(`${removeWWW(hostname)}${path}`) + query;\n      }\n\n      return null;\n    } catch {\n      return null;\n    }\n  };\n\n  const map = data.reduce((obj, {\n    x,\n    y\n  }) => {\n    if (!isValidRef(x)) {\n      return obj;\n    }\n\n    const url = cleanUrl(x);\n\n    if (!domainOnly && !raw) {\n      links[url] = x;\n    }\n\n    if (url) {\n      if (!obj[url]) {\n        obj[url] = y;\n      } else {\n        obj[url] += y;\n      }\n    }\n\n    return obj;\n  }, {});\n  return Object.keys(map).map(key => ({\n    x: key,\n    y: map[key],\n    w: links[key]\n  }));\n};\nexport const browserFilter = data => data.map(({\n  x,\n  y\n}) => {\n  var _BROWSERS$x;\n\n  return {\n    x: (_BROWSERS$x = BROWSERS[x]) !== null && _BROWSERS$x !== void 0 ? _BROWSERS$x : x,\n    y\n  };\n});\nexport const eventTypeFilter = (data, types) => {\n  if (!types || types.length === 0) {\n    return data;\n  }\n\n  return data.filter(({\n    x\n  }) => {\n    const [event] = x.split('\\t');\n    return types.some(type => type === event);\n  });\n};\nexport const percentFilter = data => {\n  const total = data.reduce((n, {\n    y\n  }) => n + y, 0);\n  return data.map((_ref) => {\n    let {\n      x,\n      y\n    } = _ref,\n        props = _objectWithoutProperties(_ref, [\"x\", \"y\"]);\n\n    return _objectSpread({\n      x,\n      y,\n      z: total ? y / total * 100 : 0\n    }, props);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}