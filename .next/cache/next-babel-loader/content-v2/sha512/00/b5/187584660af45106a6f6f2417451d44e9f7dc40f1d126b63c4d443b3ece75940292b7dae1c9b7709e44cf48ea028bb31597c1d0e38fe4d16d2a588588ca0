{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/Users/t/Documents_2/Work/Qiekub/code/umami/umami/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport classNames from 'classnames';\nimport ChartJS from 'chart.js';\nimport Legend from 'components/metrics/Legend';\nimport { formatLongNumber } from 'lib/format';\nimport { dateFormat } from 'lib/date';\nimport useLocale from 'hooks/useLocale';\nimport useTheme from 'hooks/useTheme';\nimport { DEFAUL_CHART_HEIGHT, DEFAULT_ANIMATION_DURATION, THEME_COLORS } from 'lib/constants';\nimport styles from './BarChart.module.css';\nimport ChartTooltip from './ChartTooltip';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nexport default function BarChart(_ref) {\n  var chartId = _ref.chartId,\n      datasets = _ref.datasets,\n      unit = _ref.unit,\n      records = _ref.records,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? DEFAUL_CHART_HEIGHT : _ref$height,\n      _ref$animationDuratio = _ref.animationDuration,\n      animationDuration = _ref$animationDuratio === void 0 ? DEFAULT_ANIMATION_DURATION : _ref$animationDuratio,\n      className = _ref.className,\n      _ref$stacked = _ref.stacked,\n      stacked = _ref$stacked === void 0 ? false : _ref$stacked,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      _ref$onCreate = _ref.onCreate,\n      onCreate = _ref$onCreate === void 0 ? function () {} : _ref$onCreate,\n      _ref$onUpdate = _ref.onUpdate,\n      onUpdate = _ref$onUpdate === void 0 ? function () {} : _ref$onUpdate;\n  var canvas = useRef();\n  var chart = useRef();\n\n  var _useState = useState(null),\n      tooltip = _useState[0],\n      setTooltip = _useState[1];\n\n  var _useLocale = useLocale(),\n      _useLocale2 = _slicedToArray(_useLocale, 1),\n      locale = _useLocale2[0];\n\n  var _useTheme = useTheme(),\n      _useTheme2 = _slicedToArray(_useTheme, 1),\n      theme = _useTheme2[0];\n\n  var forceUpdate = useForceUpdate();\n  var colors = {\n    text: THEME_COLORS[theme].gray700,\n    line: THEME_COLORS[theme].gray200,\n    zeroLine: THEME_COLORS[theme].gray500\n  };\n\n  function renderXLabel(label, index, values) {\n    if (loading) return '';\n    var d = new Date(values[index].value);\n    var sw = canvas.current.width / window.devicePixelRatio;\n\n    switch (unit) {\n      case 'minute':\n        return index % 2 === 0 ? dateFormat(d, 'H:mm', locale) : '';\n\n      case 'hour':\n        return dateFormat(d, 'p', locale);\n\n      case 'day':\n        if (records > 25) {\n          if (sw <= 275) {\n            return index % 10 === 0 ? dateFormat(d, 'M/d', locale) : '';\n          }\n\n          if (sw <= 550) {\n            return index % 5 === 0 ? dateFormat(d, 'M/d', locale) : '';\n          }\n\n          if (sw <= 700) {\n            return index % 2 === 0 ? dateFormat(d, 'M/d', locale) : '';\n          }\n\n          return dateFormat(d, 'MMM d', locale);\n        }\n\n        if (sw <= 375) {\n          return index % 2 === 0 ? dateFormat(d, 'MMM d', locale) : '';\n        }\n\n        if (sw <= 425) {\n          return dateFormat(d, 'MMM d', locale);\n        }\n\n        return dateFormat(d, 'EEE M/d', locale);\n\n      case 'month':\n        if (sw <= 330) {\n          return index % 2 === 0 ? dateFormat(d, 'MMM', locale) : '';\n        }\n\n        return dateFormat(d, 'MMM', locale);\n\n      default:\n        return label;\n    }\n  }\n\n  function renderYLabel(label) {\n    return +label > 1000 ? formatLongNumber(label) : label;\n  }\n\n  function renderTooltip(model) {\n    var opacity = model.opacity,\n        title = model.title,\n        body = model.body,\n        labelColors = model.labelColors;\n\n    if (!opacity || !title) {\n      setTooltip(null);\n      return;\n    }\n\n    var _body$0$lines$0$split = body[0].lines[0].split(':'),\n        _body$0$lines$0$split2 = _slicedToArray(_body$0$lines$0$split, 2),\n        label = _body$0$lines$0$split2[0],\n        value = _body$0$lines$0$split2[1];\n\n    setTooltip({\n      title: dateFormat(new Date(+title[0]), getTooltipFormat(unit), locale),\n      value: value,\n      label: label,\n      labelColor: labelColors[0].backgroundColor\n    });\n  }\n\n  function getTooltipFormat(unit) {\n    switch (unit) {\n      case 'hour':\n        return 'EEE p â€” PPP';\n\n      default:\n        return 'PPPP';\n    }\n  }\n\n  function createChart() {\n    var options = {\n      animation: {\n        duration: animationDuration\n      },\n      tooltips: {\n        enabled: false,\n        custom: renderTooltip\n      },\n      hover: {\n        animationDuration: 0\n      },\n      responsive: true,\n      responsiveAnimationDuration: 0,\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          type: 'time',\n          distribution: 'series',\n          time: {\n            unit: unit,\n            tooltipFormat: 'x'\n          },\n          ticks: {\n            callback: renderXLabel,\n            minRotation: 0,\n            maxRotation: 0,\n            fontColor: colors.text,\n            autoSkipPadding: 1\n          },\n          gridLines: {\n            display: false\n          },\n          offset: true,\n          stacked: true\n        }],\n        yAxes: [{\n          ticks: {\n            callback: renderYLabel,\n            beginAtZero: true,\n            fontColor: colors.text\n          },\n          gridLines: {\n            color: colors.line,\n            zeroLineColor: colors.zeroLine\n          },\n          stacked: stacked\n        }]\n      }\n    };\n    onCreate(options);\n    chart.current = new ChartJS(canvas.current, {\n      type: 'bar',\n      data: {\n        datasets: datasets\n      },\n      options: options\n    });\n  }\n\n  function updateChart() {\n    var options = chart.current.options;\n    options.legend.labels.fontColor = colors.text;\n    options.scales.xAxes[0].time.unit = unit;\n    options.scales.xAxes[0].ticks.callback = renderXLabel;\n    options.scales.xAxes[0].ticks.fontColor = colors.text;\n    options.scales.yAxes[0].ticks.fontColor = colors.text;\n    options.scales.yAxes[0].ticks.precision = 0;\n    options.scales.yAxes[0].gridLines.color = colors.line;\n    options.scales.yAxes[0].gridLines.zeroLineColor = colors.zeroLine;\n    options.animation.duration = animationDuration;\n    options.tooltips.custom = renderTooltip;\n    onUpdate(chart.current);\n    chart.current.update();\n    forceUpdate();\n  }\n\n  useEffect(function () {\n    if (datasets) {\n      if (!chart.current) {\n        createChart();\n      } else {\n        setTooltip(null);\n        updateChart();\n      }\n    }\n  }, [datasets, unit, animationDuration, locale, theme]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      \"data-tip\": \"\",\n      \"data-for\": \"\".concat(chartId, \"-tooltip\"),\n      className: classNames(styles.chart, className),\n      style: {\n        height: height\n      },\n      children: /*#__PURE__*/_jsx(\"canvas\", {\n        ref: canvas\n      })\n    }), /*#__PURE__*/_jsx(Legend, {\n      chart: chart.current\n    }), /*#__PURE__*/_jsx(ChartTooltip, {\n      chartId: chartId,\n      tooltip: tooltip\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}