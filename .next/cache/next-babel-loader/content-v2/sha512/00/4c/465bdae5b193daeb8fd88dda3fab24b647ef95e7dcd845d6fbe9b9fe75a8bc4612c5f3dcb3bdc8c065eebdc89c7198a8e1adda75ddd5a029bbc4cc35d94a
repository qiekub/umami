{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { get } from 'lib/web';\nimport { updateQuery } from 'redux/actions/queries';\nimport { useRouter } from 'next/router';\nexport default function useFetch(url, options = {}, update = []) {\n  const dispatch = useDispatch();\n  const {\n    0: response,\n    1: setResponse\n  } = useState();\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const {\n    0: loading,\n    1: setLoadiing\n  } = useState(false);\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n  const {\n    basePath\n  } = useRouter();\n  const {\n    params = {},\n    disabled,\n    headers,\n    delay = 0,\n    interval,\n    onDataLoad\n  } = options;\n\n  async function loadData(params) {\n    try {\n      setLoadiing(true);\n      setError(null);\n      const time = performance.now();\n      const {\n        data,\n        status,\n        ok\n      } = await get(`${basePath}${url}`, params, headers);\n      dispatch(updateQuery({\n        url,\n        time: performance.now() - time,\n        completed: Date.now()\n      }));\n\n      if (status >= 400) {\n        setError(data);\n        setResponse({\n          data: null,\n          status,\n          ok\n        });\n      } else {\n        setResponse({\n          data,\n          status,\n          ok\n        });\n      }\n\n      onDataLoad === null || onDataLoad === void 0 ? void 0 : onDataLoad(data);\n    } catch (e) {\n      console.error(e);\n      setError(e);\n    } finally {\n      setLoadiing(false);\n    }\n  }\n\n  useEffect(() => {\n    if (url && !disabled) {\n      const id = setTimeout(() => loadData(params), delay);\n      return () => {\n        clearTimeout(id);\n      };\n    }\n  }, [url, !!disabled, count, ...update]);\n  useEffect(() => {\n    if (interval && !disabled) {\n      const id = setInterval(() => setCount(state => state + 1), interval);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [interval, !!disabled]);\n  return _objectSpread(_objectSpread({}, response), {}, {\n    error,\n    loading\n  });\n}","map":null,"metadata":{},"sourceType":"module"}